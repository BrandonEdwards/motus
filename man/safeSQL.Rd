% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/safeSQL.R
\name{safeSQL}
\alias{safeSQL}
\title{Return a function that safely performs sql queries on a connection.}
\usage{
safeSQL(con, busyTimeout = 300)
}
\arguments{
\item{con}{RSQLite connection to database, as returned by
dbConnect(SQLite(), ...), or character scalar giving path to
SQLite database, or MySQLConnection, or dplyr::src}

\item{busyTimeout}{how many total seconds to wait while retrying a
locked database.  Default: 300 (5 minutes).  Uses \code{pragma busy_timeout}
to allow for inter-process DB locking.  Only implemented for
SQLite connections, as it appears unnecessary for MySQL
connections.}
}
\description{
This uses dbGetPreparedQuery (for RSQLite and ":" parameters) or
dbQuoteStrings (for MySQL or RSQLite "%" parameters).  It should
prevent e.g. SQL injection attacks.
}
\note{
for convenience, access is provided to some safeSQL internals, via the
"$" method for class \code{safeSQL}
\itemize{
\item \code{$con} the underlying db connection
\item \code{$db} the underlying database filename
}

For MySQL, only one line of an insert can be provided per call; i.e. there is
no SendPreparedQuery method to allow binding a data.frame's data to a prepared
query.  Moreover, character parameters are quoted using \link{\code{dbQuoteString}}
unless the parameter is wrapped in \link{\code{DBI::SQL}}, or if you
specify \code{.QUOTE=FALSE}

safeSQL is meant for multi-process access of a DB with small, fast
queries; this is the case for the server.sqlite database that holds
job information.  The longer accesses required by e.g. the tag
finder are handled by locking the receiver DB via lockSymbol().

For both MySQL and SQLite connections, queries that fail due
to deadlock-prevention by the database are retried after a random wait
of 0 to 10 seconds.
}
\author{
John Brzustowski \email{jbrzusto@REMOVE_THIS_PART_fastmail.fm}
}

