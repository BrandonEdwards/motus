fun(jb)
fun(filter(jb, spEN == "Red Knot"))
rm(fun)
fun<- function(data, lat.name = "lat", tagsPerPanel = 5){
if(class(tagsPerPanel) != "numeric") stop('Numeric value required for "tagsPerPanel"')
tmp <- if(class(data) == "data.frame"){
tmp = data
} else {
tmp = data %>% collect %>% as.data.frame
}
data = data %>% mutate(round_ts = 3600*round(as.numeric(ts)/3600, 0)) ## round times to the hour
data = distinct(select(data, id, site, round_ts, lat, fullID))
dataGrouped <- dplyr::filter_(data, paste(lat.name, "!=", 0)) %>% group_by(site) %>%
summarise_(.dots = setNames(paste0('mean(',lat.name,')'), 'meanlat')) ## get summary of mean lats by site
data <- inner_join(data, dataGrouped, by = "site") ## join grouped data with data
data <- select(data, id, site, round_ts, lat, meanlat, fullID) %>% distinct %>% collect %>% as.data.frame
data$meanlat = round(data$meanlat, digits = 2) ## round to 2 significant digits
data$sitelat <- as.factor(paste(data$site, data$meanlat, sep = " ")) ## new column with site and lat
data <- within(data, sitelat <- reorder(sitelat, (lat))) ## order sitelat by latitude
data$round_ts <- lubridate::as_datetime(data$round_ts, tz = "UTC")
## We want to plot multiple tags per panel, so sort their labels and create a grouping factor
## Note that labels are sorted in increasing order by ID
labs = data$fullID[order(data$id,data$fullID)]
dup = duplicated(labs)
tagLabs = labs[!dup]
tagGroupIDs = data$id[order(data$id,data$fullID)][!dup]
tagGroup = 1 + floor((0:length(tagLabs)) / tagsPerPanel)
ngroup = length(tagGroup)
names(tagGroup) = tagLabs
tagGroupFactor = tagGroup[as.character(data$fullID)]
tagGroupLabels = tapply(tagGroupIDs, 1 + floor((0:(length(tagGroupIDs)-1)) / tagsPerPanel), function(data) paste("IDs:", paste(sort(unique(data)), collapse=",")))
data$tagGroupFactor = factor(tagGroupFactor, labels=tagGroupLabels, ordered=TRUE)
data <- unique(subset(data, select = c(round_ts, meanlat, sitelat, fullID, tagGroupFactor))) ## get unique hourly detections for small dataframe
data <- data[order(data$round_ts),] ## order by time
out <- by(data, INDICES = data$tagGroupFactor, FUN = function(m){
m <- droplevels(m)
m <- ggplot2::ggplot(m, ggplot2::aes(round_ts, sitelat, colour = fullID, group = fullID))
p <- ggplot2::ggplot(data, ggplot2::aes(round_ts, sitelat, col = fullID, group = fullID))
m + ggplot2::geom_line() + ggplot2::geom_point(pch = 21) + ggplot2::theme_bw() +
ggplot2::labs(title = "Detection time vs Site (ordered by latitude) by Tag", x = "Date", y = "Latitude", colour = "ID") +
ggplot2::facet_wrap("tagGroupFactor") + ggplot2::theme(axis.text.x = element_text(angle = 45, hjust = 1))
})
do.call(gridExtra::grid.arrange, out)
}
fun(alltags)
fun(filter(alltags, spEN == "Red Knot"))
fun<- function(data, lat.name = "lat", tagsPerPanel = 5){
data = data %>% mutate(round_ts = 3600*round(as.numeric(ts)/3600, 0)) ## round times to the hour
data = distinct(select(data, id, site, round_ts, lat, fullID))
dataGrouped <- dplyr::filter_(data, paste(lat.name, "!=", 0)) %>% group_by(site) %>%
summarise_(.dots = setNames(paste0('mean(',lat.name,')'), 'meanlat')) ## get summary of mean lats by site
data <- inner_join(data, dataGrouped, by = "site") ## join grouped data with data
data <- select(data, id, site, round_ts, lat, meanlat, fullID) %>% distinct %>% collect %>% as.data.frame
data$meanlat = round(data$meanlat, digits = 2) ## round to 2 significant digits
data$sitelat <- as.factor(paste(data$site, data$meanlat, sep = " ")) ## new column with site and lat
data <- within(data, sitelat <- reorder(sitelat, (lat))) ## order sitelat by latitude
data$round_ts <- lubridate::as_datetime(data$round_ts, tz = "UTC")
## We want to plot multiple tags per panel, so sort their labels and create a grouping factor
## Note that labels are sorted in increasing order by ID
labs = data$fullID[order(data$id,data$fullID)]
dup = duplicated(labs)
tagLabs = labs[!dup]
tagGroupIDs = data$id[order(data$id,data$fullID)][!dup]
tagGroup = 1 + floor((0:length(tagLabs)) / tagsPerPanel)
ngroup = length(tagGroup)
names(tagGroup) = tagLabs
tagGroupFactor = tagGroup[as.character(data$fullID)]
tagGroupLabels = tapply(tagGroupIDs, 1 + floor((0:(length(tagGroupIDs)-1)) / tagsPerPanel), function(data) paste("IDs:", paste(sort(unique(data)), collapse=",")))
data$tagGroupFactor = factor(tagGroupFactor, labels=tagGroupLabels, ordered=TRUE)
data <- unique(subset(data, select = c(round_ts, meanlat, sitelat, fullID, tagGroupFactor))) ## get unique hourly detections for small dataframe
data <- data[order(data$round_ts),] ## order by time
out <- by(data, INDICES = data$tagGroupFactor, FUN = function(m){
m <- droplevels(m)
m <- ggplot2::ggplot(m, ggplot2::aes(round_ts, sitelat, colour = fullID, group = fullID))
p <- ggplot2::ggplot(data, ggplot2::aes(round_ts, sitelat, col = fullID, group = fullID))
m + ggplot2::geom_line() + ggplot2::geom_point(pch = 21) + ggplot2::theme_bw() +
ggplot2::labs(title = "Detection time vs Site (ordered by latitude) by Tag", x = "Date", y = "Latitude", colour = "ID") +
ggplot2::facet_wrap("tagGroupFactor") + ggplot2::theme(axis.text.x = element_text(angle = 45, hjust = 1))
})
do.call(gridExtra::grid.arrange, out)
}
fun(jb)
fun(alltags)
fun<- function(data, sitename = unique(data$site)){
tmp <- if(class(data) == "data.frame"){
tmp = data
} else {
tmp = data %>% collect %>% as.data.frame
}
data = data %>% mutate(hour = 3600*round(as.numeric(ts)/3600, 0)) ## round times to the hour
#data <- filter_(data, paste("site", "==", "sitename"))
data <- select(data, hour, antBearing, fullID, site) %>% distinct %>% collect %>% as.data.frame
data$hour <- lubridate::as_datetime(data$hour, tz = "UTC")
p <- ggplot2::ggplot(data, ggplot2::aes(hour, fullID, col = as.factor(antBearing)))
p + ggplot2::geom_point() + ggplot2::theme_bw() +
ggplot2::labs(title = "Detection Time vs Tag ID, coloured by antenna", x = NULL, y = "Tag ID", colour = "Antenna Bearing") +
ggplot2::facet_wrap(~site) + ggplot2::theme(axis.text.x = element_text(angle = 45, hjust = 1))
}
rm(fun)
fun<- function(data, sitename = unique(data$site)){
tmp <- if(class(data) == "data.frame"){
tmp = data
} else {
tmp = data %>% collect %>% as.data.frame
}
data = data %>% mutate(hour = 3600*round(as.numeric(ts)/3600, 0)) ## round times to the hour
#data <- filter_(data, paste("site", "==", "sitename"))
data <- select(data, hour, antBearing, fullID, site) %>% distinct %>% collect %>% as.data.frame
data$hour <- lubridate::as_datetime(data$hour, tz = "UTC")
p <- ggplot2::ggplot(data, ggplot2::aes(hour, fullID, col = as.factor(antBearing)))
p + ggplot2::geom_point() + ggplot2::theme_bw() +
ggplot2::labs(title = "Detection Time vs Tag ID, coloured by antenna", x = NULL, y = "Tag ID", colour = "Antenna Bearing") +
ggplot2::facet_wrap(~site) + ggplot2::theme(axis.text.x = element_text(angle = 45, hjust = 1))
}
fun<- function(data){
tmp <- if(class(data) == "data.frame"){
tmp = data
} else {
tmp = data %>% collect %>% as.data.frame
}
data <- subset(tmp, select = c(ts, motusTagID, tagDeployID, lat, lon, site)) ## get only relevant columns
data$ts <- lubridate::as_datetime(data$ts, tz = "UTC")
data <- data %>% dplyr::group_by(motusTagID, tagDeployID) %>% do(consec.fun(.))
data <- data %>% dplyr::group_by(motusTagID, tagDeployID) %>% do(site.fun(.))
data$tot_ts = difftime(data$ts.y, data$ts.x, units = "secs")
data$dist <- with(data, latLonDist(lat.x, lon.x, lat.y, lon.y)) ## distance in meters
data$rate <- with(data, dist/(as.numeric(tot_ts))) ## rate of travel in m/s
data$bearing <- with(data, geosphere::bearing(matrix(c(lon.x, lat.x), ncol=2),
matrix(c(lon.y, lat.y), ncol=2))) ## bearing (see package geosphere for help)
return(data)
}
tmp <- fun(jb)
tmp1 <- fun(alltags)
str(jb)
str(alltags)
fun<- function(data){
tmp <- if(class(data) == "data.frame"){
tmp = data
} else {
tmp = data %>% collect %>% as.data.frame
}
data <- subset(data, select = c(ts, motusTagID, tagDeployID, lat, lon, site)) ## get only relevant columns
data$ts <- lubridate::as_datetime(data$ts, tz = "UTC")
data <- data %>% dplyr::group_by(motusTagID, tagDeployID) %>% do(consec.fun(.))
data <- data %>% dplyr::group_by(motusTagID, tagDeployID) %>% do(site.fun(.))
data$tot_ts = difftime(data$ts.y, data$ts.x, units = "secs")
data$dist <- with(data, latLonDist(lat.x, lon.x, lat.y, lon.y)) ## distance in meters
data$rate <- with(data, dist/(as.numeric(tot_ts))) ## rate of travel in m/s
data$bearing <- with(data, geosphere::bearing(matrix(c(lon.x, lat.x), ncol=2),
matrix(c(lon.y, lat.y), ncol=2))) ## bearing (see package geosphere for help)
return(data)
}
fun(jb)
tmp <- fun(jb)
tmp <- fun(alltags)
fun <- function(data, units = "hours"){
tmp <- if(class(data) == "data.frame"){
tmp = data
} else {
tmp = data %>% collect %>% as.data.frame
}
data <- select(data, motusTagID, sig, lat, site, ts) %>% distinct %>% collect %>% as.data.frame
data <- within(data, site <- reorder(site, (lat))) ## order site by latitude
data$ts <- as_datetime(data$ts, tz = "UTC")
grouped <- dplyr::group_by(data, site)
data <- dplyr::summarise(grouped,
first_ts=min(ts),
last_ts=max(ts),
tot_ts = difftime(max(ts), min(ts), units = units),
num.tags = length(unique(motusTagID)),
num.det = length(ts))
detections <- ggplot2::ggplot(data = data, ggplot2::aes(x = site, y = num.det)) +
ggplot2::geom_bar(stat = "identity") + ggplot2::theme_bw() +
ggplot2::theme(axis.text.x = ggplot2::element_text(angle = 45, hjust = 1)) +  ## make x-axis labels on a 45ยบ angle to read more easily
ggplot2::labs(title = "Total number of detections per site, across all tags", x= "Site", y = "Total detections") ## changes x- and y-axis label
tags <- ggplot2::ggplot(data = data, ggplot2::aes(x = site, y = num.tags)) +
ggplot2::geom_bar(stat = "identity") + ggplot2::theme_bw() + ## creates bar plot by site
ggplot2::theme(axis.text.x = ggplot2::element_text(angle = 45, hjust = 1)) + ## make x-axis labels on a 45ยบ angle to read more easily
ggplot2::labs(title = "Total number of tags detected per site", x= "Site", y = "Number of tags") ## changes x- and y-axis label
gridExtra::grid.arrange(detections, tags, nrow = 2)
return(data)
}
tmp<- fun(jb)
tmp1 <- fun(alltags)
fun <- function(data, units = "hours"){
#  tmp <- if(class(data) == "data.frame"){
#    tmp = data
#  } else {
#    tmp = data %>% collect %>% as.data.frame
#  }
data <- select(data, motusTagID, sig, lat, site, ts) %>% distinct %>% collect %>% as.data.frame
data <- within(data, site <- reorder(site, (lat))) ## order site by latitude
data$ts <- as_datetime(data$ts, tz = "UTC")
grouped <- dplyr::group_by(data, site)
data <- dplyr::summarise(grouped,
first_ts=min(ts),
last_ts=max(ts),
tot_ts = difftime(max(ts), min(ts), units = units),
num.tags = length(unique(motusTagID)),
num.det = length(ts))
detections <- ggplot2::ggplot(data = data, ggplot2::aes(x = site, y = num.det)) +
ggplot2::geom_bar(stat = "identity") + ggplot2::theme_bw() +
ggplot2::theme(axis.text.x = ggplot2::element_text(angle = 45, hjust = 1)) +  ## make x-axis labels on a 45ยบ angle to read more easily
ggplot2::labs(title = "Total number of detections per site, across all tags", x= "Site", y = "Total detections") ## changes x- and y-axis label
tags <- ggplot2::ggplot(data = data, ggplot2::aes(x = site, y = num.tags)) +
ggplot2::geom_bar(stat = "identity") + ggplot2::theme_bw() + ## creates bar plot by site
ggplot2::theme(axis.text.x = ggplot2::element_text(angle = 45, hjust = 1)) + ## make x-axis labels on a 45ยบ angle to read more easily
ggplot2::labs(title = "Total number of tags detected per site", x= "Site", y = "Number of tags") ## changes x- and y-axis label
gridExtra::grid.arrange(detections, tags, nrow = 2)
return(data)
}
tmp2 <- fun(jb)
tmp3 <- fun(alltags)
View(tmp)
View(tmp1)
View(tmp2)
View(tmp3)
tmp <- fun(filter(alltags, spEN == "Red Knot"))
fun<- function(data, sitename){
data <- filter_(data, paste("site", "==", "sitename"))
data <- select(data, antBearing, ts, lat, sig, fullID, site) %>% distinct %>% collect %>% as.data.frame
data$ts <- lubridate::as_datetime(data$ts, tz = "UTC")
p <- ggplot2::ggplot(data, ggplot2::aes(ts, sig, col = as.factor(antBearing)))
p + ggplot2::geom_point() + ggplot2::theme_bw() + ggplot2::theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggplot2::labs(title = paste0(sitename, ' tag detections by signal strength, coloured by antenna'), x = "Date", y = "Signal Strength", colour = "Antenna Bearing") +
ggplot2::facet_wrap(~fullID)
}
fun(alltags)
fun(alltags, sitename = "Piskwamish")
fun(filter(jb, motusTagID == "16037"), sitename = "Nititishi")
fun(filter(jb, motusTagID == "16037"), sitename = "Netitishi")
fun<- function(data, sitename = unique(data$site)){
data = data %>% mutate(hour = 3600*round(as.numeric(ts)/3600, 0)) ## round times to the hour
#data <- filter_(data, paste("site", "==", "sitename"))
data <- select(data, hour, antBearing, fullID, site) %>% distinct %>% collect %>% as.data.frame
data$hour <- lubridate::as_datetime(data$hour, tz = "UTC")
p <- ggplot2::ggplot(data, ggplot2::aes(hour, fullID, col = as.factor(antBearing)))
p + ggplot2::geom_point() + ggplot2::theme_bw() +
ggplot2::labs(title = "Detection Time vs Tag ID, coloured by antenna", x = NULL, y = "Tag ID", colour = "Antenna Bearing") +
ggplot2::facet_wrap(~site) + ggplot2::theme(axis.text.x = element_text(angle = 45, hjust = 1))
}
fun(alltags)
fun<- function(data, lat.name = "lat", tagsPerPanel = 5){
data = data %>% mutate(round_ts = 3600*round(as.numeric(ts)/3600, 0)) ## round times to the hour
data = distinct(select(data, id, site, round_ts, lat, fullID))
dataGrouped <- dplyr::filter_(data, paste(lat.name, "!=", 0)) %>% group_by(site) %>%
summarise_(.dots = setNames(paste0('mean(',lat.name,')'), 'meanlat')) ## get summary of mean lats by site
data <- inner_join(data, dataGrouped, by = "site") ## join grouped data with data
data <- select(data, id, site, round_ts, lat, meanlat, fullID) %>% distinct %>% collect %>% as.data.frame
data$meanlat = round(data$meanlat, digits = 2) ## round to 2 significant digits
data$sitelat <- as.factor(paste(data$site, data$meanlat, sep = " ")) ## new column with site and lat
data <- within(data, sitelat <- reorder(sitelat, (lat))) ## order sitelat by latitude
data$round_ts <- lubridate::as_datetime(data$round_ts, tz = "UTC")
## We want to plot multiple tags per panel, so sort their labels and create a grouping factor
## Note that labels are sorted in increasing order by ID
labs = data$fullID[order(data$id,data$fullID)]
dup = duplicated(labs)
tagLabs = labs[!dup]
tagGroupIDs = data$id[order(data$id,data$fullID)][!dup]
tagGroup = 1 + floor((0:length(tagLabs)) / tagsPerPanel)
ngroup = length(tagGroup)
names(tagGroup) = tagLabs
tagGroupFactor = tagGroup[as.character(data$fullID)]
tagGroupLabels = tapply(tagGroupIDs, 1 + floor((0:(length(tagGroupIDs)-1)) / tagsPerPanel), function(data) paste("IDs:", paste(sort(unique(data)), collapse=",")))
data$tagGroupFactor = factor(tagGroupFactor, labels=tagGroupLabels, ordered=TRUE)
data <- unique(subset(data, select = c(round_ts, meanlat, sitelat, fullID, tagGroupFactor))) ## get unique hourly detections for small dataframe
data <- data[order(data$round_ts),] ## order by time
out <- by(data, INDICES = data$tagGroupFactor, FUN = function(m){
m <- droplevels(m)
m <- ggplot2::ggplot(m, ggplot2::aes(round_ts, sitelat, colour = fullID, group = fullID))
p <- ggplot2::ggplot(data, ggplot2::aes(round_ts, sitelat, col = fullID, group = fullID))
m + ggplot2::geom_line() + ggplot2::geom_point(pch = 21) + ggplot2::theme_bw() +
ggplot2::labs(title = "Detection time vs Site (ordered by latitude) by Tag", x = "Date", y = "Latitude", colour = "ID") +
ggplot2::facet_wrap("tagGroupFactor") + ggplot2::theme(axis.text.x = element_text(angle = 45, hjust = 1))
})
do.call(gridExtra::grid.arrange, out)
}
fun(alltags)
fun(jb)
fun(jb, tagsPerPanel = 10)
fun(jb, lat.name = "depLat")
names(jb)
fun<- function(data, lat.name = "lat", tagsPerPanel = 5){
data = data %>% mutate(round_ts = 3600*round(as.numeric(ts)/3600, 0)) ## round times to the hour
data = distinct(select(data, id, site, round_ts, lat, recvDeployLat, lon, recvDeployLon, fullID))
dataGrouped <- dplyr::filter_(data, paste(lat.name, "!=", 0)) %>% group_by(site) %>%
summarise_(.dots = setNames(paste0('mean(',lat.name,')'), 'meanlat')) ## get summary of mean lats by site
data <- inner_join(data, dataGrouped, by = "site") ## join grouped data with data
data <- select(data, id, site, round_ts, lat, meanlat, fullID) %>% distinct %>% collect %>% as.data.frame
data$meanlat = round(data$meanlat, digits = 2) ## round to 2 significant digits
data$sitelat <- as.factor(paste(data$site, data$meanlat, sep = " ")) ## new column with site and lat
data <- within(data, sitelat <- reorder(sitelat, (lat))) ## order sitelat by latitude
data$round_ts <- lubridate::as_datetime(data$round_ts, tz = "UTC")
## We want to plot multiple tags per panel, so sort their labels and create a grouping factor
## Note that labels are sorted in increasing order by ID
labs = data$fullID[order(data$id,data$fullID)]
dup = duplicated(labs)
tagLabs = labs[!dup]
tagGroupIDs = data$id[order(data$id,data$fullID)][!dup]
tagGroup = 1 + floor((0:length(tagLabs)) / tagsPerPanel)
ngroup = length(tagGroup)
names(tagGroup) = tagLabs
tagGroupFactor = tagGroup[as.character(data$fullID)]
tagGroupLabels = tapply(tagGroupIDs, 1 + floor((0:(length(tagGroupIDs)-1)) / tagsPerPanel), function(data) paste("IDs:", paste(sort(unique(data)), collapse=",")))
data$tagGroupFactor = factor(tagGroupFactor, labels=tagGroupLabels, ordered=TRUE)
data <- unique(subset(data, select = c(round_ts, meanlat, sitelat, fullID, tagGroupFactor))) ## get unique hourly detections for small dataframe
data <- data[order(data$round_ts),] ## order by time
out <- by(data, INDICES = data$tagGroupFactor, FUN = function(m){
m <- droplevels(m)
m <- ggplot2::ggplot(m, ggplot2::aes(round_ts, sitelat, colour = fullID, group = fullID))
p <- ggplot2::ggplot(data, ggplot2::aes(round_ts, sitelat, col = fullID, group = fullID))
m + ggplot2::geom_line() + ggplot2::geom_point(pch = 21) + ggplot2::theme_bw() +
ggplot2::labs(title = "Detection time vs Site (ordered by latitude) by Tag", x = "Date", y = "Latitude", colour = "ID") +
ggplot2::facet_wrap("tagGroupFactor") + ggplot2::theme(axis.text.x = element_text(angle = 45, hjust = 1))
})
do.call(gridExtra::grid.arrange, out)
}
fun(jb, lat.name = "recvDeployLat")
fun(jb, lat.name = "recvDeployLon")
fun<- function(data, tag.id){
data <- select(data, motusTagID, sig, ts, antBearing, lat, fullID, site) %>% filter_(paste("motusTagID", "==", "tag.id")) %>% distinct %>% collect %>% as.data.frame
data <- within(data, site <- reorder(site, (lat))) ## order site by latitude
data$ts <- lubridate::as_datetime(data$ts, tz = "UTC")
p <- ggplot2::ggplot(data, ggplot2::aes(ts, sig, col = as.factor(antBearing)))
p + ggplot2::geom_point() + ggplot2::theme_bw() + ggplot2::labs(title = paste("Detection Time vs Signal Strength, coloured by antenna \n ID ", tag.id), x = "Date", y = "Signal Strength", colour = "Antenna Bearing") +
ggplot2::facet_grid(site~.) + ggplot2::theme(axis.text.x = element_text(angle = 45, hjust = 1))
}
fun(jb, tag.id = 17367)
fun(jb, tag.id = 16047)
fun(alltags, tag.id = 16047)
fun<- function(data){
data <- select(data, motusTagID, fullID, sig, lat, lon, site, ts) %>% distinct %>% collect %>% as.data.frame
data$ts <- as_datetime(data$ts, tz = "UTC")
grouped <- dplyr::group_by(data, fullID)
tmp <- dplyr::summarise(grouped,
first_ts=min(ts),
last_ts=max(ts),
tot_ts = difftime(max(ts), min(ts), units = "secs"),
num_det = length(ts)) ## total time in seconds
tmp <- merge(tmp, subset(data, select = c(ts, fullID, site, lat, lon)),
by.x = c("first_ts", "fullID"), by.y = c("ts", "fullID"), all.x = TRUE)
tmp <- unique(merge(tmp, subset(data, select = c(ts, fullID, site, lat, lon)),
by.x = c("last_ts", "fullID"), by.y = c("ts", "fullID"), all.x = TRUE))
tmp <- dplyr::rename(tmp, first_site = site.x, last_site = site.y)
tmp$dist <- with(tmp, latLonDist(lat.x, lon.x, lat.y, lon.y)) ## distance in meters
tmp$rate <- with(tmp, dist/(as.numeric(tot_ts))) ## rate of travel in m/s
tmp$bearing <- with(tmp, geosphere::bearing(matrix(c(lon.x, lat.x), ncol=2),
matrix(c(lon.y, lat.y), ncol=2))) ## bearing (see package geosphere for help)
#  tmp$rhumbline_bearing <- with(tmp, geosphere::bearingRhumb(matrix(c(lon.x, lat.x), ncol=2),
#                                                        matrix(c(lon.y, lat.y), ncol=2))) ## rhumbline bearing (see package geosphere for help)
return(tmp[c("fullID", "first_ts", "last_ts", "first_site", "last_site", "lat.x", "lon.x", "lat.y", "lon.y",
"tot_ts", "dist", "rate", "bearing", "num_det")])
}
tmp <- fun(jb)
tmp1 <- fun(alltags)
tmp <- fun(filter(jb, spEN == "Red Knot"))
tmp1 <- fun(filter(alltags, spEN == "Red Knot"))
tmp <- fun(filter(alltags, motusTagID %in% c(16047, 16037, 16039)))
tmp1 <- fun(filter(jb, motusTagID %in% c(16047, 16037, 16039)))
fun<- function(data, units = "hours"){
data <- select(data, motusTagID, fullID, site, ts) %>% distinct %>% collect %>% as.data.frame
data$ts <- as_datetime(data$ts, tz = "UTC")
grouped <- dplyr::group_by(data, fullID, site)
data <- dplyr::summarise(grouped,
first_ts=min(ts),
last_ts=max(ts),
tot_ts = difftime(max(ts), min(ts), units = units),
num_det = length(ts))
return(data)
}
tmp <- fun(jb)
tmp1 <- fun(alltags)
tmp <- (filter(alltags, motusTagID %in% c(16047, 16037, 16039)))
tmp1 <- (filter(jb, motusTagID %in% c(16047, 16037, 16039)))
tmp <- fun(filter(alltags, motusTagID %in% c(16047, 16037, 16039)))
tmp1 <- fun(filter(jb, motusTagID %in% c(16047, 16037, 16039)))
fun<- function(data){
data$dup <- duplicated(data[c("fullID","ts")]) | duplicated(data[c("fullID","ts")], fromLast = TRUE)
data$dup <- ifelse(data$dup == TRUE,
duplicated(data[c("fullID","ts", "site")]) | duplicated(data[c("fullID","ts", "site")], fromLast = TRUE),
"dup")
data$dup <- ifelse(data$dup == "FALSE",
"TRUE",
"FALSE")
data <- subset(data, dup == TRUE, select = -c(dup))
return(data)
}
fun(alltags)
str(alltags)
tmp <- fun(alltags)
tmp <- fun(jb)
View(tmp)
data <- jb
data$dup <- duplicated(data[c("motusTagID","ts")]) | duplicated(data[c("motusTagID","ts")], fromLast = TRUE)
View(data)
data$dup <- ifelse(data$dup == TRUE,
duplicated(data[c("motusTagID","ts", "site")]) | duplicated(data[c("motusTagID","ts", "site")], fromLast = TRUE),
"dup")
data$dup <- ifelse(data$dup == "FALSE",
"TRUE",
"FALSE")
View(data)
head(dup)
head(data)
data <- jb
data$dup <- duplicated(data[c("motusTagID","ts")]) | duplicated(data[c("motusTagID","ts")], fromLast = TRUE)
View(data)
tmp <- select(data, motusTagID, ts, site)
tmp <- data %>% select(motusTagID, ts, site) %>% distinct
tmp$dup <- duplicated(tmp[c("motusTagID","ts")]) | duplicated(tmp[c("motusTagID","ts")], fromLast = TRUE)
View(tmp)
tmp <- data %>% distinct(motusTagID, ts, .keep_all = TRUE)
View(tmp)
data <- jb
tmp <- data %>% distinct(motusTagID, ts, .keep_all = TRUE)
View(tmp)
tmp <- data %>% distinct(motusTagID, ts)
View(tmp)
data<- jb
tmp$dup <- duplicated(data[c("motusTagID","ts")]) | duplicated(data[c("motusTagID","ts")], fromLast = TRUE)
data <- jb
data$dup <- duplicated(data[c("motusTagID","ts")]) | duplicated(data[c("motusTagID","ts")], fromLast = TRUE)
data <- filter(data, dup ==TRUE)
View(data)
data <- jb
tmp <- data %>% select(motusTagID, ts, site) %>% distinct
tmp$dup <- duplicated(tmp[c("motusTagID","ts")]) | duplicated(tmp[c("motusTagID","ts")], fromLast = TRUE)
tmp <- filter(tmp, dup ==TRUE)
View(tmp)
View(tmp)
tmp <- data %>% select(motusTagID, ts, site) %>% distinct
tmp$dup <- duplicated(tmp[c("motusTagID","ts")]) | duplicated(tmp[c("motusTagID","ts")], fromLast = TRUE)
View(tmp)
tmp <- data %>% select(motusTagID, ts) %>% distinct
tmp$dup <- duplicated(tmp[c("motusTagID","ts")]) | duplicated(tmp[c("motusTagID","ts")], fromLast = TRUE)
View(tmp)
tmp <- data %>% select(motusTagID, ts) %>% distinct
tmp <- duplicated(tmp[c("motusTagID","ts")]) | duplicated(tmp[c("motusTagID","ts")], fromLast = TRUE)
tmp <- data %>% select(motusTagID, ts) %>% distinct
tmp <- tmp[duplicated(tmp[c("motusTagID","ts")]) | duplicated(tmp[c("motusTagID","ts")]), fromLast = TRUE,]
tmp <- data %>% select(motusTagID, ts) %>% distinct
tmp$dup <- duplicated(tmp[c("motusTagID","ts")]) | duplicated(tmp[c("motusTagID","ts")], fromLast = TRUE)
tmp <- filter(tmp, dup == TRUE)
View(tmp)
tmp <- tmp %>% filter(dup == TRUE) %>% distinct
View(tmp)
tmp <- data %>% select(motusTagID, ts) %>% distinct
tmp$dup <- duplicated(tmp[c("motusTagID","ts")]) | duplicated(tmp[c("motusTagID","ts")], fromLast = TRUE)
tmp <- tmp %>% filter(dup == TRUE) %>% distinct
tmp <- filter(tmp, dup ==TRUE)
tmp <- data %>% select(motusTagID, ts) %>% distinct
tmp$dup <- duplicated(tmp[c("motusTagID","ts")]) | duplicated(tmp[c("motusTagID","ts")], fromLast = TRUE)
tmp <- tmp %>% filter(dup == TRUE) %>% distinct
tmp <- data %>% select(motusTagID, ts) %>% distinct
tmp$dup <- duplicated(tmp[c("motusTagID","ts")]) | duplicated(tmp[c("motusTagID","ts")], fromLast = TRUE)
tmp <- filter(dup == TRUE)
tmp <- filter(tmp, dup == TRUE)
View(tmp)
tmp1 <- left_join(tmp, select(data, motusTagID, ts, site))
View(tmp)
View(tmp1)
View(tmp)
tmp <- distinct(tmp)
tmp <- unique(tmp)
View(tmp)
tmp1 <- left_join(tmp, select(data, motusTagID, ts, site))
View(tmp1)
tmp1 <- unique(tmp1)
View(tmp1)
tmp3 <- fun(jb)
View(tmp3)
View(tmp1)
require(dplyr)
tmp <- data %>% select(motusTagID, ts) %>% distinct
tmp$dup <- duplicated(tmp[c("motusTagID","ts")]) | duplicated(tmp[c("motusTagID","ts")], fromLast = TRUE)
tmp <- filter(tmp, dup == TRUE)
tmp <- unique(tmp)
tmp1 <- merge(tmp, select(data, motusTagID, ts, site), all.x = TRUE)
tmp1 <- unique(tmp1)
View(tmp1)
tmp2 <- ddply(tmp1, .(motusTagID, ts), nrow)
require(ddply)
tmp2 <- summarise(group_by(tmp1, motusTagID, ts), length(ts))
View(tmp2)
tmp2 <- group_size(group_by(tmp1, motusTagID, ts))
tmp1$num.dup <- group_size(group_by(tmp1, motusTagID, ts))
tmp2 <- summarise(group_by(tmp1, motusTagID, ts), length(ts))
View(tmp2)
tmp2 <- summarise(group_by(tmp1, motusTagID, ts), num.dup = length(ts))
View(tmp2)
tmp2 <- filter(tmp2, num.dup > 1)
head(data)
tmp2 <- left_join(tmp2, select(data, motusTagID, ts, site, lat, lon, speciesID))
View(tmp2)
tmp <- data %>% select(motusTagID, ts) %>% distinct
tmp$dup <- duplicated(tmp[c("motusTagID","ts")]) | duplicated(tmp[c("motusTagID","ts")], fromLast = TRUE)
tmp <- filter(tmp, dup == TRUE)
tmp <- unique(tmp)
tmp1 <- merge(tmp, select(data, motusTagID, ts, site), all.x = TRUE)
tmp1 <- unique(tmp1)
tmp2 <- summarise(group_by(tmp1, motusTagID, ts), num.dup = length(ts))
View(tmp2)
tmp2 <- filter(tmp2, num.dup > 1)
tmp2 <- merge(tmp2, select(data, motusTagID, ts, site, lat, lon, speciesID), all = TRUE)
tmp2 <- summarise(group_by(tmp1, motusTagID, ts), num.dup = length(ts))
tmp2 <- filter(tmp2, num.dup > 1)
tmp2 <- merge(tmp2, select(data, motusTagID, ts, site, lat, lon, speciesID), all.x = TRUE)
View(tmp2)
unique(tmp2site)
unique(tmp2$site)
tmp2 <- unique(tmp2)
View(tmp2)
