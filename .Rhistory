data$ts <- lubridate::as_datetime(data$ts, tz = "UTC")
p <- ggplot2::ggplot(data, ggplot2::aes(ts, sig, col = as.factor(antBearing)))
p + ggplot2::geom_point() + ggplot2::theme_bw() + ggplot2::labs(title = paste("Detection Time vs Signal Strength, coloured by antenna \n ID ", motusTagID), x = "Date", y = "Signal Strength", colour = "Antenna Bearing") +
ggplot2::facet_grid(recvDepName~.) + ggplot2::theme(axis.text.x = element_text(angle = 45, hjust = 1))
}
plotTagSig <- function(data, motusTagID){
data <- select(data, motusTagID, sig, ts, antBearing, recvDeployLat, fullID, recvDepName) %>% filter_(paste("motusTagID", "==", "motusTagID")) %>% distinct %>% collect %>% as.data.frame
data <- within(data, recvDepName <- reorder(recvDepName, (recvDeployLat))) ## order recvDepName by latitude
data$ts <- lubridate::as_datetime(data$ts, tz = "UTC")
p <- ggplot2::ggplot(data, ggplot2::aes(ts, sig, col = as.factor(antBearing)))
p + ggplot2::geom_point() + ggplot2::theme_bw() + ggplot2::labs(title = paste("Detection Time vs Signal Strength, coloured by antenna \n ID ", motusTagID), x = "Date", y = "Signal Strength", colour = "Antenna Bearing") +
ggplot2::facet_grid(recvDepName~.) + ggplot2::theme(axis.text.x = element_text(angle = 45, hjust = 1))
}
plotTagSig(df.alltags, tag.id = 16047)
plotTagSig(df.alltags, motusTagID = 16047)
plotTagSig(tbl.alltags, motusTagID = 16037)
plotTagSig(tbl.alltags, motusTagID = 16035)
tmp <- filter(df.alltags, motusTagID == 16035)
unique(tmp$recvDepName)
data <- df.alltags
motusTagID = 16035
data <- select(data, motusTagID, sig, ts, antBearing, recvDeployLat, fullID, recvDepName) %>% filter_(paste("motusTagID", "==", "motusTagID")) %>% distinct %>% collect %>% as.data.frame
data <- data %>%  filter_(paste("motusTagID", "==", "motusTagID")) %>% distinct %>% collect %>% as.data.frame
data <- df.alltags
data <- data %>%  filter_(paste("motusTagID", "==", "motusTagID")) %>% distinct %>% collect %>% as.data.frame
data <- df.alltags
data <- select(data, motusTagID, sig, ts, antBearing, recvDeployLat, fullID, recvDepName) %>% filter(motusTagID == "motusTagID") %>% distinct %>% collect %>% as.data.frame
motusTagID = 16035
data <- df.alltags
data <- select(data, motusTagID, sig, ts, antBearing, recvDeployLat, fullID, recvDepName) %>% filter(motusTagID == "motusTagID") %>% distinct %>% collect %>% as.data.frame
data <- df.alltags
data <- select(data, motusTagID, sig, ts, antBearing, recvDeployLat, fullID, recvDepName) %>% filter(motusTagID == motusTagID) %>% distinct %>% collect %>% as.data.frame
plotTagSig <- function(data, motusTagID){
#  data <- select(data, motusTagID, sig, ts, antBearing, recvDeployLat, fullID, recvDepName) %>% filter(motusTagID == motusTagID) %>% distinct %>% collect %>% as.data.frame
data <- data %>% filter_(paste("motusTagID", "==", "motusTagID")) %>% distinct %>% collect %>% as.data.frame
data <- within(data, recvDepName <- reorder(recvDepName, (recvDeployLat))) ## order recvDepName by latitude
data$ts <- lubridate::as_datetime(data$ts, tz = "UTC")
p <- ggplot2::ggplot(data, ggplot2::aes(ts, sig, col = as.factor(antBearing)))
p + ggplot2::geom_point() + ggplot2::theme_bw() + ggplot2::labs(title = paste("Detection Time vs Signal Strength, coloured by antenna \n ID ", motusTagID), x = "Date", y = "Signal Strength", colour = "Antenna Bearing") +
ggplot2::facet_grid(recvDepName~.) + ggplot2::theme(axis.text.x = element_text(angle = 45, hjust = 1))
}
plotTagSig(tbl.alltags, motusTagID = 16035)
plotTagSig <- function(data, motusTagID){
data <- filter_(paste("motusTagID", "==", "motusTagID")) %>% distinct %>% collect %>% as.data.frame
data <- select(data, motusTagID, sig, ts, antBearing, recvDeployLat, fullID, recvDepName) %>% distinct %>% collect %>% as.data.frame
data <- within(data, recvDepName <- reorder(recvDepName, (recvDeployLat))) ## order recvDepName by latitude
data$ts <- lubridate::as_datetime(data$ts, tz = "UTC")
p <- ggplot2::ggplot(data, ggplot2::aes(ts, sig, col = as.factor(antBearing)))
p + ggplot2::geom_point() + ggplot2::theme_bw() + ggplot2::labs(title = paste("Detection Time vs Signal Strength, coloured by antenna \n ID ", motusTagID), x = "Date", y = "Signal Strength", colour = "Antenna Bearing") +
ggplot2::facet_grid(recvDepName~.) + ggplot2::theme(axis.text.x = element_text(angle = 45, hjust = 1))
}
plotTagSig(tbl.alltags, motusTagID = 16035)
data <- tbl.alltags
data <- filter_(paste("motusTagID", "==", "motusTagID")) %>% distinct %>% collect %>% as.data.frame
plotSiteSig <- function(data, recvDepName){
data <- filter_(data, paste("recvDepName", "==", "recvDepName"))
data <- select(data, antBearing, ts, recvDeployLat, sig, fullID, recvDepName) %>% distinct %>% collect %>% as.data.frame
data$ts <- lubridate::as_datetime(data$ts, tz = "UTC")
p <- ggplot2::ggplot(data, ggplot2::aes(ts, sig, col = as.factor(antBearing)))
p + ggplot2::geom_point() + ggplot2::theme_bw() + ggplot2::theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggplot2::labs(title = paste0(recvDepName, ' tag detections by signal strength, coloured by antenna'), x = "Date", y = "Signal Strength", colour = "Antenna Bearing") +
ggplot2::facet_wrap(~fullID)
}
plotSiteSig(tbl.alltags, recvDepName = "Piskwamish")
plotSiteSig(filter(df.alltags, motusTagID %in% c(16037, 16039, 16035)), recvDepName = "Netitishi")
plotTagSig <- function(data, motusTagID){
data <- filter_(paste("motusTagID", "==", "motusTagID"))
data <- select(data, motusTagID, sig, ts, antBearing, recvDeployLat, fullID, recvDepName) %>% distinct %>% collect %>% as.data.frame
data <- within(data, recvDepName <- reorder(recvDepName, (recvDeployLat))) ## order recvDepName by latitude
data$ts <- lubridate::as_datetime(data$ts, tz = "UTC")
p <- ggplot2::ggplot(data, ggplot2::aes(ts, sig, col = as.factor(antBearing)))
p + ggplot2::geom_point() + ggplot2::theme_bw() + ggplot2::labs(title = paste("Detection Time vs Signal Strength, coloured by antenna \n ID ", motusTagID), x = "Date", y = "Signal Strength", colour = "Antenna Bearing") +
ggplot2::facet_grid(recvDepName~.) + ggplot2::theme(axis.text.x = element_text(angle = 45, hjust = 1))
}
plotTagSig(tbl.alltags, motusTagID = 16035)
plotTagSig <- function(data, motusTagID){
data <- filter_(data, paste("motusTagID", "==", "motusTagID"))
data <- select(data, motusTagID, sig, ts, antBearing, recvDeployLat, fullID, recvDepName) %>% distinct %>% collect %>% as.data.frame
data <- within(data, recvDepName <- reorder(recvDepName, (recvDeployLat))) ## order recvDepName by latitude
data$ts <- lubridate::as_datetime(data$ts, tz = "UTC")
p <- ggplot2::ggplot(data, ggplot2::aes(ts, sig, col = as.factor(antBearing)))
p + ggplot2::geom_point() + ggplot2::theme_bw() + ggplot2::labs(title = paste("Detection Time vs Signal Strength, coloured by antenna \n ID ", motusTagID), x = "Date", y = "Signal Strength", colour = "Antenna Bearing") +
ggplot2::facet_grid(recvDepName~.) + ggplot2::theme(axis.text.x = element_text(angle = 45, hjust = 1))
}
plotTagSig(tbl.alltags, motusTagID = 16035)
data <- tbl.alltags
data <- filter_(data, paste("motusTagID", "==", "motusTagID"))
data <- select(data, motusTagID, sig, ts, antBearing, recvDeployLat, fullID, recvDepName) %>% distinct %>% collect %>% as.data.frame
motusTagID = "16035"
data <- tbl.alltags
data <- select(data, motusTagID, sig, ts, antBearing, recvDeployLat, fullID, recvDepName) %>% distinct %>% collect %>% as.data.frame
data <- tbl.alltags
data <- filter_(data, paste("motusTagID", "==", "motusTagID"))
data <- select(data, motusTagID, sig, ts, antBearing, recvDeployLat, fullID, recvDepName) %>% distinct %>% collect %>% as.data.frame
motusTagID
class(motusTagID)
as.numeric(motusTagID)
motusTagID <- as.numeric(motusTagID)
class(motusTagID)
motusTagID = 16035
data <- tbl.alltags
motusTagID <- as.numeric(motusTagID)
data <- filter_(data, paste("motusTagID", "==", "motusTagID"))
data <- select(data, motusTagID, sig, ts, antBearing, recvDeployLat, fullID, recvDepName) %>% distinct %>% collect %>% as.data.frame
data <- tbl.alltags
data <- select(data, motusTagID, sig, ts, antBearing, recvDeployLat, fullID, recvDepName) %>% distinct %>% collect %>% as.data.frame
data <- filter_(data, paste("motusTagID", "==", "motusTagID"))
data <- df.alltags
data <- filter_(data, paste("motusTagID", "==", "motusTagID"))
plotTagSig <- function(data, motusTagID){
motusTagID <- as.numeric(motusTagID)
data <- filter_(data, paste("motusTagID", "==", "motusTagID"))
data <- select(data, motusTagID, sig, ts, antBearing, recvDeployLat, fullID, recvDepName) %>% distinct %>% collect %>% as.data.frame
data <- within(data, recvDepName <- reorder(recvDepName, (recvDeployLat))) ## order recvDepName by latitude
data$ts <- lubridate::as_datetime(data$ts, tz = "UTC")
p <- ggplot2::ggplot(data, ggplot2::aes(ts, sig, col = as.factor(antBearing)))
p + ggplot2::geom_point() + ggplot2::theme_bw() + ggplot2::labs(title = paste("Detection Time vs Signal Strength, coloured by antenna \n ID ", motusTagID), x = "Date", y = "Signal Strength", colour = "Antenna Bearing") +
ggplot2::facet_grid(recvDepName~.) + ggplot2::theme(axis.text.x = element_text(angle = 45, hjust = 1))
}
plotTagSig(tbl.alltags, motusTagID = 16035)
plotTagSig(df.alltags, motusTagID = 16047)
plotTagSig <- function(data, tag.id){
motusTagID <- as.numeric(motusTagID)
data <- filter_(data, paste("motusTagID", "==", "tag.id"))
data <- select(data, motusTagID, sig, ts, antBearing, recvDeployLat, fullID, recvDepName) %>% distinct %>% collect %>% as.data.frame
data <- within(data, recvDepName <- reorder(recvDepName, (recvDeployLat))) ## order recvDepName by latitude
data$ts <- lubridate::as_datetime(data$ts, tz = "UTC")
p <- ggplot2::ggplot(data, ggplot2::aes(ts, sig, col = as.factor(antBearing)))
p + ggplot2::geom_point() + ggplot2::theme_bw() + ggplot2::labs(title = paste("Detection Time vs Signal Strength, coloured by antenna \n ID ", motusTagID), x = "Date", y = "Signal Strength", colour = "Antenna Bearing") +
ggplot2::facet_grid(recvDepName~.) + ggplot2::theme(axis.text.x = element_text(angle = 45, hjust = 1))
}
plotTagSig(tbl.alltags, motusTagID = 16035)
plotTagSig <- function(data, tag.id){
# motusTagID <- as.numeric(motusTagID)
data <- filter_(data, paste("motusTagID", "==", "tag.id"))
data <- select(data, motusTagID, sig, ts, antBearing, recvDeployLat, fullID, recvDepName) %>% distinct %>% collect %>% as.data.frame
data <- within(data, recvDepName <- reorder(recvDepName, (recvDeployLat))) ## order recvDepName by latitude
data$ts <- lubridate::as_datetime(data$ts, tz = "UTC")
p <- ggplot2::ggplot(data, ggplot2::aes(ts, sig, col = as.factor(antBearing)))
p + ggplot2::geom_point() + ggplot2::theme_bw() + ggplot2::labs(title = paste("Detection Time vs Signal Strength, coloured by antenna \n ID ", motusTagID), x = "Date", y = "Signal Strength", colour = "Antenna Bearing") +
ggplot2::facet_grid(recvDepName~.) + ggplot2::theme(axis.text.x = element_text(angle = 45, hjust = 1))
}
plotTagSig(tbl.alltags, motusTagID = 16035)
plotTagSig(tbl.alltags, tag.id = 16035)
plotTagSig <- function(data, motusTagID){
tag.id <- motusTagID
data <- filter_(data, paste("motusTagID", "==", "tag.id"))
data <- select(data, motusTagID, sig, ts, antBearing, recvDeployLat, fullID, recvDepName) %>% distinct %>% collect %>% as.data.frame
data <- within(data, recvDepName <- reorder(recvDepName, (recvDeployLat))) ## order recvDepName by latitude
data$ts <- lubridate::as_datetime(data$ts, tz = "UTC")
p <- ggplot2::ggplot(data, ggplot2::aes(ts, sig, col = as.factor(antBearing)))
p + ggplot2::geom_point() + ggplot2::theme_bw() + ggplot2::labs(title = paste("Detection Time vs Signal Strength, coloured by antenna \n ID ", motusTagID), x = "Date", y = "Signal Strength", colour = "Antenna Bearing") +
ggplot2::facet_grid(recvDepName~.) + ggplot2::theme(axis.text.x = element_text(angle = 45, hjust = 1))
}
plotTagSig(tbl.alltags, tag.id = 16035)
plotTagSig(tbl.alltags, motusTagID = 16035)
plotTagSig(df.alltags, motusTagID = 16047)
simSiteDet <- function(data){
data <- data %>% distinct %>% collect %>% as.data.frame
data$ts <- as_datetime(data$ts, tz = "UTC")
tmp <- data %>% select(motusTagID, ts) %>% distinct ## get only fields we want duplicates of
tmp$dup <- duplicated(tmp[c("motusTagID","ts")]) | duplicated(tmp[c("motusTagID","ts")], fromLast = TRUE) ## label all duplicates
tmp <- unique(filter(tmp, dup == TRUE)) ## keep only duplicates
tmp <- merge(tmp, select(data, motusTagID, ts, recvDepName), all.x = TRUE) ## merge to get sites of each duplicate ts and motusTagID
tmp <- unique(tmp) ## remove duplicates
tmp <- summarise(group_by(tmp, motusTagID, ts), num.dup = length(ts)) ## determine how many times each combo of motusTagID and ts show up
tmp <- filter(tmp, num.dup > 1) ## remove any where number of duplicates is less than 1, because anything over 1 will have detections at more than one site
tmp <- merge(tmp, data, all.x = TRUE) ## now merge the identified duplicates back with detection data so we have more info available
tmp <- unique(tmp)
return(tmp)
}
tmp <- simSiteDet(tbl.alltags)
simSites <- simSiteDet(df.alltags)
View(simSites)
siteSum <- function(data, units = "hours"){
data <- select(data, motusTagID, sig, recvDeployLat, recvDepName, ts) %>% distinct %>% collect %>% as.data.frame
data <- within(data, recvDepName <- reorder(recvDepName, (recvDeployLat))) ## order site by latitude
data$ts <- as_datetime(data$ts, tz = "UTC")
grouped <- dplyr::group_by(data, recvDepName)
data <- dplyr::summarise(grouped,
first_ts=min(ts),
last_ts=max(ts),
tot_ts = difftime(max(ts), min(ts), units = units),
num.tags = length(unique(motusTagID)),
num.det = length(ts))
detections <- ggplot2::ggplot(data = data, ggplot2::aes(x = recvDepName, y = num.det)) +
ggplot2::geom_bar(stat = "identity") + ggplot2::theme_bw() +
ggplot2::theme(axis.text.x = ggplot2::element_text(angle = 45, hjust = 1)) +  ## make x-axis labels on a 45º angle to read more easily
ggplot2::labs(title = "Total number of detections per recvDepName, across all tags", x= "Site", y = "Total detections") ## changes x- and y-axis label
tags <- ggplot2::ggplot(data = data, ggplot2::aes(x = recvDepName, y = num.tags)) +
ggplot2::geom_bar(stat = "identity") + ggplot2::theme_bw() + ## creates bar plot by recvDepName
ggplot2::theme(axis.text.x = ggplot2::element_text(angle = 45, hjust = 1)) + ## make x-axis labels on a 45º angle to read more easily
ggplot2::labs(title = "Total number of tags detected per site", x= "Site", y = "Number of tags") ## changes x- and y-axis label
gridExtra::grid.arrange(detections, tags, nrow = 2)
return(data)
}
site_summary <- siteSum(df.alltags)
site_summary
View(site_summary)
site_summary <- siteSum(filter(df.alltags, recvDepName %in% c("Niapiskau", "Netitishi", "Old Cur", "Washkaugou")), units = "mins")
site_summary <- siteSum(tbl.alltags)
site_summary <- siteSum(filter(df.alltags, speciesEN == "Red Knot"))
site_summary <- siteSum(filter(df.alltags, recvDepName %in% c("Niapiskau", "Netitishi", "Old Cur", "Washkaugou")), units = "mins")
siteSumDaily <- function(data, units = "hours"){
data <- select(data, motusTagID, sig, recvDepName, ts) %>% distinct %>% collect %>% as.data.frame
data$ts <- as_datetime(data$ts, tz = "UTC")
data$date <- as.Date(data$ts)
grouped <- dplyr::group_by(data, recvDepName, date)
site_sum <- dplyr::summarise(grouped,
first_ts=min(ts),
last_ts=max(ts),
tot_ts = difftime(max(ts), min(ts), units = units),
num_tags = length(unique(motusTagID)),
num_det = length(ts))
site_sum <- as.data.frame(site_sum)
return(site_sum)
}
daily_site_summary <- siteSumDaily(tbl.alltags, units = "mins")
daily_site_summary <- siteSumDaily(filter(tbl.alltags, recvDepName %in% c("Niapiskau", "Netitishi", "Old Cut", "Washkaugou")), units = "mins")
daily_site_summary <- siteSumDaily(tbl.alltags, units = "mins")
daily_site_summary <- siteSumDaily(filter(df.alltags, spEN == "Red Knot"))
daily_site_summary <- siteSumDaily(filter(df.alltags, speciesEN == "Red Knot"))
daily_site_summary <- siteSumDaily(filter(tbl.alltags, recvDepName %in% c("Niapiskau", "Netitishi", "Old Cut", "Washkaugou")), units = "mins")
siteTrans <- function(data){
tmp <- if(class(data) == "data.frame"){
tmp = data
} else {
tmp = data %>% collect %>% as.data.frame
}
data <- subset(tmp, select = c(ts, motusTagID, tagDeployID, recvDeployLat, recvDeployLon, recvDepName)) ## get only relevant columns
data$ts <- lubridate::as_datetime(data$ts, tz = "UTC")
data <- data %>% dplyr::group_by(motusTagID, tagDeployID) %>% do(consec.fun(.))
data <- data %>% dplyr::group_by(motusTagID, tagDeployID) %>% do(site.fun(.))
data$tot_ts = difftime(data$ts.y, data$ts.x, units = "secs")
data$dist <- with(data, latLonDist(recvDeployLat.x, recvDeployLat.x, recvDeployLat.y, recvDeployLon.y)) ## distance in meters
data$rate <- with(data, dist/(as.numeric(tot_ts))) ## rate of travel in m/s
data$bearing <- with(data, geosphere::bearing(matrix(c(recvDeployLon.x, recvDeployLat.x), ncol=2),
matrix(c(recvDeployLon.y, recvDeployLat.y), ncol=2))) ## bearing (see package geosphere for help)
return(data)
}
transitions <- siteTrans(df.alltags)
## site.fun and consec.fun adapted from "between.locs.R" script written by Phil
site.fun <- function(df) {
df <- subset(df, select = -c(motusTagID, tagDeployID))
df <- df[order(df$ts),] ## should already be in order, but just in case
out.df.x <- df[1:(length(df$recvDepName)-1), ]
names(out.df.x) <- paste(names(df), "x", sep=".")
out.df.y <- df[2:length(df$recvDepName), ]
names(out.df.y) <- paste(names(df), "y", sep=".")
out.df <- cbind(out.df.x, out.df.y)
out.df <- subset(out.df, ((recvDepName.x != recvDepName.y)))
return(out.df)
}
transitions <- siteTrans(df.alltags)
latLonDist = function(lat1, lon1, lat2, lon2) {
a = 6378137
b = 6356752.314245
f = 1/298.257223563  ## WGS-84 ellipsoid params
llmat = cbind(lat1, lon1, lat2, lon2) ## recycles coordinates to match
s = rep(-1, nrow(llmat)) ## return values; -1 means not yet computed
for (i in 1:nrow(llmat)) {  ## calculate distance between i'th pair of points
if (!all(is.finite(llmat[i,]))) {
s[i] = NA
next
}
L = rad(llmat[i, 4]-llmat[i, 2])
U1 = atan((1-f) * tan(rad(llmat[i, 1])))
U2 = atan((1-f) * tan(rad(llmat[i, 3])))
sinU1 = sin(U1)
cosU1 = cos(U1)
sinU2 = sin(U2)
cosU2 = cos(U2)
lambda = L
iterLimit = 100
repeat {
sinLambda = sin(lambda)
cosLambda = cos(lambda)
sinSigma = sqrt((cosU2*sinLambda) * (cosU2*sinLambda) +
(cosU1*sinU2-sinU1*cosU2*cosLambda) * (cosU1*sinU2-sinU1*cosU2*cosLambda))
if (abs(sinSigma) < 1e-10) {
s[i] = 0 ## co-incident points
break
}
cosSigma = sinU1*sinU2 + cosU1*cosU2*cosLambda
sigma = atan2(sinSigma, cosSigma)
sinAlpha = cosU1 * cosU2 * sinLambda / sinSigma
cosSqAlpha = 1 - sinAlpha*sinAlpha
cos2SigmaM = cosSigma - 2*sinU1*sinU2 / cosSqAlpha
if (is.nan(cos2SigmaM))
cos2SigmaM = 0  ## equatorial line: cosSqAlpha=0 (§6)
C = f/16*cosSqAlpha*(4+f*(4-3*cosSqAlpha))
lambdaP = lambda
lambda = L + (1-C) * f * sinAlpha *
(sigma + C*sinSigma*(cos2SigmaM+C*cosSigma*(-1+2*cos2SigmaM*cos2SigmaM)))
iterLimit = iterLimit - 1
if (abs(lambda-lambdaP) <= 1e-12 || iterLimit == 0)
break
}
if (iterLimit==0) {
s[i] = NaN  ## formula failed to converge
} else if (s[i] < 0) {
uSq = cosSqAlpha * (a*a - b*b) / (b*b)
A = 1 + uSq/16384*(4096+uSq*(-768+uSq*(320-175*uSq)))
B = uSq/1024 * (256+uSq*(-128+uSq*(74-47*uSq)))
deltaSigma = B*sinSigma*(cos2SigmaM+B/4*(cosSigma*(-1+2*cos2SigmaM*cos2SigmaM)-
B/6*cos2SigmaM*(-3+4*sinSigma*sinSigma)*(-3+4*cos2SigmaM*cos2SigmaM)))
s[i] = b*A*(sigma-deltaSigma)
}
}
s = round(s, 3)
return (s)
}
siteTrans <- function(data){
tmp <- if(class(data) == "data.frame"){
tmp = data
} else {
tmp = data %>% collect %>% as.data.frame
}
data <- subset(tmp, select = c(ts, motusTagID, tagDeployID, recvDeployLat, recvDeployLon, recvDepName)) ## get only relevant columns
data$ts <- lubridate::as_datetime(data$ts, tz = "UTC")
data <- data %>% dplyr::group_by(motusTagID, tagDeployID) %>% do(consec.fun(.))
data <- data %>% dplyr::group_by(motusTagID, tagDeployID) %>% do(site.fun(.))
data$tot_ts = difftime(data$ts.y, data$ts.x, units = "secs")
data$dist <- with(data, latLonDist(recvDeployLat.x, recvDeployLat.x, recvDeployLat.y, recvDeployLon.y)) ## distance in meters
data$rate <- with(data, dist/(as.numeric(tot_ts))) ## rate of travel in m/s
data$bearing <- with(data, geosphere::bearing(matrix(c(recvDeployLon.x, recvDeployLat.x), ncol=2),
matrix(c(recvDeployLon.y, recvDeployLat.y), ncol=2))) ## bearing (see package geosphere for help)
return(data)
}
transitions <- siteTrans(df.alltags)
## convert to radians from degrees
rad = function(x) {
return (x * (pi/180))
}
siteTrans <- function(data){
tmp <- if(class(data) == "data.frame"){
tmp = data
} else {
tmp = data %>% collect %>% as.data.frame
}
data <- subset(tmp, select = c(ts, motusTagID, tagDeployID, recvDeployLat, recvDeployLon, recvDepName)) ## get only relevant columns
data$ts <- lubridate::as_datetime(data$ts, tz = "UTC")
data <- data %>% dplyr::group_by(motusTagID, tagDeployID) %>% do(consec.fun(.))
data <- data %>% dplyr::group_by(motusTagID, tagDeployID) %>% do(site.fun(.))
data$tot_ts = difftime(data$ts.y, data$ts.x, units = "secs")
data$dist <- with(data, latLonDist(recvDeployLat.x, recvDeployLat.x, recvDeployLat.y, recvDeployLon.y)) ## distance in meters
data$rate <- with(data, dist/(as.numeric(tot_ts))) ## rate of travel in m/s
data$bearing <- with(data, geosphere::bearing(matrix(c(recvDeployLon.x, recvDeployLat.x), ncol=2),
matrix(c(recvDeployLon.y, recvDeployLat.y), ncol=2))) ## bearing (see package geosphere for help)
return(data)
}
transitions <- siteTrans(df.alltags)
transitions <- siteTrans(filter(df.alltags, motusTagID == 16030))
transitions <- siteTrans(filter(df.alltags, motusTagID == 16037))
transitions <- siteTrans(tbl.alltags)
consec.fun <- function(df) {
df <- df[order(df$ts),]
a <- df$recvDepName[-length(df$recvDepName)]
b <- df$recvDepName[-1]
tmp <- c(0, 1 - (as.numeric(a==b)))
run <- cumsum(tmp)
transitions <- which(diff(run) != 0)
transitions <- c(transitions, transitions+1, length(df$recvDepName))
out.df <- df[transitions,]
out.df <- out.df[order(out.df$ts),]
return(out.df)
}
tagSum <- function(data){
data$ts <- as_datetime(data$ts, tz = "UTC")
grouped <- dplyr::group_by(data, fullID)
tmp <- dplyr::summarise(grouped,
first_ts=min(ts),
last_ts=max(ts),
tot_ts = difftime(max(ts), min(ts), units = "secs"),
num_det = length(ts)) ## total time in seconds
tmp <- merge(tmp, subset(data, select = c(ts, fullID, recvDepName, recvDeployLat, recvDeployLon)),
by.x = c("first_ts", "fullID"), by.y = c("ts", "fullID"), all.x = TRUE)
tmp <- unique(merge(tmp, subset(data, select = c(ts, fullID, recvDepName, recvDeployLat, recvDeployLon)),
by.x = c("last_ts", "fullID"), by.y = c("ts", "fullID"), all.x = TRUE))
tmp <- dplyr::rename(tmp, first_site = recvDepName.x, last_site = recvDepName.y)
tmp$dist <- with(tmp, latLonDist(recvDeployLat.x, recvDeployLat.x, recvDeployLat.y, recvDeployLat.y)) ## distance in meters
tmp$rate <- with(tmp, dist/(as.numeric(tot_ts))) ## rate of travel in m/s
tmp$bearing <- with(tmp, geosphere::bearing(matrix(c(recvDeployLat.x, recvDeployLat.x), ncol=2),
matrix(c(recvDeployLat.y, recvDeployLat.y), ncol=2))) ## bearing (see package geosphere for help)
#  tmp$rhumbline_bearing <- with(tmp, geosphere::bearingRhumb(matrix(c(recvDeployLat.x, recvDeployLat.x), ncol=2),
#                                                        matrix(c(recvDeployLat.y, recvDeployLat.y), ncol=2))) ## rhumbline bearing (see package geosphere for help)
return(tmp[c("fullID", "first_ts", "last_ts", "first_site", "last_site", "recvDeployLat.x", "recvDeployLat.y",
"tot_ts", "dist", "rate", "bearing", "num_det")])
}
tag_summary <- tagSum(tbl.alltags)
tagSum <- function(data){
data <- data %>% collect %>% as.data.frame
data$ts <- as_datetime(data$ts, tz = "UTC")
grouped <- dplyr::group_by(data, fullID)
tmp <- dplyr::summarise(grouped,
first_ts=min(ts),
last_ts=max(ts),
tot_ts = difftime(max(ts), min(ts), units = "secs"),
num_det = length(ts)) ## total time in seconds
tmp <- merge(tmp, subset(data, select = c(ts, fullID, recvDepName, recvDeployLat, recvDeployLon)),
by.x = c("first_ts", "fullID"), by.y = c("ts", "fullID"), all.x = TRUE)
tmp <- unique(merge(tmp, subset(data, select = c(ts, fullID, recvDepName, recvDeployLat, recvDeployLon)),
by.x = c("last_ts", "fullID"), by.y = c("ts", "fullID"), all.x = TRUE))
tmp <- dplyr::rename(tmp, first_site = recvDepName.x, last_site = recvDepName.y)
tmp$dist <- with(tmp, latLonDist(recvDeployLat.x, recvDeployLat.x, recvDeployLat.y, recvDeployLat.y)) ## distance in meters
tmp$rate <- with(tmp, dist/(as.numeric(tot_ts))) ## rate of travel in m/s
tmp$bearing <- with(tmp, geosphere::bearing(matrix(c(recvDeployLat.x, recvDeployLat.x), ncol=2),
matrix(c(recvDeployLat.y, recvDeployLat.y), ncol=2))) ## bearing (see package geosphere for help)
#  tmp$rhumbline_bearing <- with(tmp, geosphere::bearingRhumb(matrix(c(recvDeployLat.x, recvDeployLat.x), ncol=2),
#                                                        matrix(c(recvDeployLat.y, recvDeployLat.y), ncol=2))) ## rhumbline bearing (see package geosphere for help)
return(tmp[c("fullID", "first_ts", "last_ts", "first_site", "last_site", "recvDeployLat.x", "recvDeployLat.y",
"tot_ts", "dist", "rate", "bearing", "num_det")])
}
tag_summary <- tagSum(tbl.alltags)
View(tag_summary)
tag_summary <- tagSum(filter(tbl.alltags, motusTagID %in% c(16047, 16037, 16039)))
tag_summary <- tagSum(filter(df.alltags, spEN == "Red Knot))
tag_summary <- tagSum(filter(df.alltags, speciesEN == "Red Knot"))
tag_summary <- tagSum(filter(df.alltags, speciesEN == "Red Knot"))
tagSumSite <- function(data, units = "hours"){
data <- select(data, motusTagID, fullID, recvDepName, ts) %>% distinct %>% collect %>% as.data.frame
data$ts <- as_datetime(data$ts, tz = "UTC")
grouped <- dplyr::group_by(data, fullID, recvDepName)
data <- dplyr::summarise(grouped,
first_ts=min(ts),
last_ts=max(ts),
tot_ts = difftime(max(ts), min(ts), units = units),
num_det = length(ts))
data <- as.data.frame(data)
return(data)
}
tag_site_summary <- tagSumSite(tbl.alltags, units = "mins")
tag_site_summary <- tagSumSite(filter(df.alltags, motusTagID %in% c(16047, 16037, 16039)))
tag_site_summary <- tagSumSite(filter(df.alltags, speciesEN == "Red Knot"))
timeToSunriset <- function(data, lat = "recvDeployLat", lon = "recvDeployLon", ts = "ts", units = "hours"){
data <- data %>% collect %>% as.data.frame
data$ts <- as_datetime(data$ts, tz = "UTC")
cols <- c(lat, lon, ts) ## Select columns that can't contain NA values
loc_na <- data[!complete.cases(data[cols]),] ## new dataframe with NA values in lat, lon, or ts
loc <- data[complete.cases(data[cols]),] ## new dataframe with no NA values in lat, lon, or ts
loc$sunrise <- maptools::sunriset(as.matrix(dplyr::select(loc,lon,lat)),loc$ts, POSIXct.out=T, direction='sunrise')$time
loc$sunset <- maptools::sunriset(as.matrix(dplyr::select(loc,lon,lat)),loc$ts, POSIXct.out=T, direction='sunset')$time
## to get time difference, must take into account whether you are going to/from sunrise/sunset from the
## previous or next day, this depends on when the detection was in relation to sunrise/sunset times for that day.
loc$ts_to_set <- ifelse(loc$ts < loc$sunset, difftime(loc$sunset, loc$ts, units = units),
difftime(maptools::sunriset(as.matrix(dplyr::select(loc,lon,lat)), (loc$ts + 86400), POSIXct.out=T, direction='sunset')$time, loc$ts, units = units))
loc$ts_since_set <- ifelse(loc$ts > loc$sunset, difftime(loc$ts, loc$sunset, units = units),
difftime(loc$ts, maptools::sunriset(as.matrix(dplyr::select(loc,lon,lat)), (loc$ts - 86400), POSIXct.out=T, direction='sunset')$time, units = units))
loc$ts_to_rise <- ifelse(loc$ts < loc$sunrise, difftime(loc$sunrise, loc$ts, units = units),
difftime(maptools::sunriset(as.matrix(dplyr::select(loc,lon,lat)), (loc$ts + 86400), POSIXct.out=T, direction='sunrise')$time, loc$ts, units = units))
loc$ts_since_rise <- ifelse(loc$ts > loc$sunrise, difftime(loc$ts, loc$sunrise, units = units),
difftime(loc$ts, maptools::sunriset(as.matrix(dplyr::select(loc,lon,lat)), (loc$ts - 86400), POSIXct.out=T, direction='sunrise')$time, units = units))
data <- merge(loc, loc_na, all = TRUE)
return(data)
}
sunrise <- timeToSunriset(tblalltags, units = "mins")
sunrise <- timeToSunriset(tbl.alltags, units = "mins")
sunrise <- timeToSunriset(df.alltags, lat = "gpsLat", lon = "gpsLon")
View(sunrise)
plotSite <- function(data, sitename = unique(data$recvDepName)){
data = data %>% mutate(hour = 3600*round(as.numeric(ts)/3600, 0)) ## round times to the hour
#data <- filter_(data, paste("recvDepName", "==", "sitename"))
data <- select(data, hour, antBearing, fullID, recvDepName) %>% distinct %>% collect %>% as.data.frame
data$hour <- lubridate::as_datetime(data$hour, tz = "UTC")
p <- ggplot2::ggplot(data, ggplot2::aes(hour, fullID, col = as.factor(antBearing)))
p + ggplot2::geom_point() + ggplot2::theme_bw() +
ggplot2::labs(title = "Detection Time vs Tag ID, coloured by antenna", x = NULL, y = "Tag ID", colour = "Antenna Bearing") +
ggplot2::facet_wrap(~recvDepName) + ggplot2::theme(axis.text.x = element_text(angle = 45, hjust = 1))
}
plotSite(tbl.alltags)
plotSite(filter(df.alltags, recvDepName == "Piskwamish"))
plotSite(filter(df.alltags, motusTagID %in% c(16047, 16037, 16039)))
describe()
document()
document()
require(devtools)
document()
document()
document()
document()
document()
install_github("motusWTS/motus", force = TRUE)
tmp <- tagme(176, update = FALSE, new = FALSE, dir = "./Downloads/")
tmp <- tagme(176, new = FALSE, update = FALSE, dir = "./Downloads/")
tmp <- tagme(176, new = FALSE, update = FALSE, dir = "./Downloads")
tmp <- tagme(176, new = FALSE, update = FALSE, dir = "/users/zoecrysler/Downloads/")
tmp <- tbl(tmp, "alltags")
summary <- siteSum(tmp)
View(summary)
summary <- siteTrans(tmp)
install_github("motusWTS/motus", force = TRUE)
??plotCoord
??plotRouteMap
document()
remove.packages(motus)
remove.packages("motus")
install_github("motusWTS/motus", force = TRUE)
library(motus)
remove.packages("motusClient")
remove.packages("motus")
install_github("motusWTS/motus", force = TRUE)
require(devtools)
install_github("motusWTS/motus", force = TRUE)
library(motus)
??plotAllTagsCoord
document()
require(devtools)
document()
document()
document()
document()
document()
