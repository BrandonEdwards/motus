data <- select(tmp1, motusTagID, ts, lat, lon, fullID, site) %>% distinct %>% collect %>% as.data.frame
data <- filter(tmp1, ts = 1411570640)
data <- select(data, motusTagID, ts, lat, lon, fullID, site) %>% distinct %>% collect %>% as.data.frame
str(tmp1$ts)
class(tmp1$ts)
data <- filter_(tmp1, ts <= as.numeric(as.POSIXct("2014-08-29")))
data <- filter(tmp1, ts <= as.numeric(as.POSIXct("2014-08-29")))
data <- select(data, motusTagID, ts, lat, lon, fullID, site) %>% distinct %>% collect %>% as.data.frame
data <- filter.tbl_sql(tmp1, ts = 1411570640)
class(tmp1)
data <- select(data, motusTagID, ts, lat, lon, fullID, site) %>% distinct %>% collect %>% as.data.frame
data <- select(tmp1, motusTagID, ts, lat, lon, fullID, site) %>% distinct %>% collect %>% as.data.frame
class(data)
str(data)
data <- filter.tbl_sql(tmp1, ts == 1411570640)
data <- filter(tmp1, ts == 1411570640)
data <- select(tmp1, motusTagID, ts, lat, lon, fullID, site) %>% distinct %>% collect %>% as.data.frame
data <- filter(tmp1, ts == 1411570640)
data <- select(data, motusTagID, ts, lat, lon, fullID, site) %>% distinct %>% collect %>% as.data.frame
data <- filter(tmp1, ts == "1411570640")
data <- select(data, motusTagID, ts, lat, lon, fullID, site) %>% distinct %>% collect %>% as.data.frame
data <- select(tmp1, motusTagID, ts, lat, lon, fullID, site) %>% distinct %>% collect %>% as.data.frame
View(data)
data <- filter(tmp1, ts == "1411741849")
data <- select(data, motusTagID, ts, lat, lon, fullID, site) %>% distinct %>% collect %>% as.data.frame
data <- filter(tmp1, ts = "1411741849")
data <- select(data, motusTagID, ts, lat, lon, fullID, site) %>% distinct %>% collect %>% as.data.frame
data <- filter(tmp1, ts > "1411741849")
data <- select(data, motusTagID, ts, lat, lon, fullID, site) %>% distinct %>% collect %>% as.data.frame
View(data)
data <- select(tmp1, motusTagID, ts, lat, lon, fullID, site) %>% distinct %>% collect %>% as.data.frame
data <- filter(tmp1, ts > "1411741849")
data <- select(data, motusTagID, ts, lat, lon, fullID, site) %>% distinct %>% collect %>% as.data.frame
data1 <- select(tmp1, motusTagID, ts, lat, lon, fullID, site) %>% distinct %>% collect %>% as.data.frame
data1 <- filter(data1, ts > "1411741849")
data1 <- select(tmp1, motusTagID, ts, lat, lon, fullID, site) %>% distinct %>% collect %>% as.data.frame
data1 <- filter(data1, ts > 1411741849)
data <- filter(tmp1, ts > as.numeric(as.POSIXct("2014-08-29")))
data1 <- select(data, motusTagID, ts, lat, lon, fullID, site) %>% distinct %>% collect %>% as.data.frame
as.numeric(as.POSIXct("2014-08-29"))
data <- filter(tmp1, ts > 1411741849)
data1 <- select(data, motusTagID, ts, lat, lon, fullID, site) %>% distinct %>% collect %>% as.data.frame
View(data1)
data <- filter(tmp1, ts > as.character(as.POSIXct("2014-08-29")))
data1 <- select(data, motusTagID, ts, lat, lon, fullID, site) %>% distinct %>% collect %>% as.data.frame
as.character(as.POSIXct("2014-08-29"))
as.numeric(as.POSIXct("2014-08-29"))
as.numeric("2014-08-29")
as.character(1409295600)
data <- filter(tmp1, ts > as.character(as.numeric(as.POSIXct("2014-08-29"))))
data1 <- select(data, motusTagID, ts, lat, lon, fullID, site) %>% distinct %>% collect %>% as.data.frame
recvStart = "2014-08-20"
recvEnd = "2017-09-15"
rm(startTime)
rm(endTime)
fun <- function(site_data, data, zoom, latCentre, lonCentre,
maptype = c("satellite", "terrain", "hybrid", "roadmap"), recvStart, recvEnd){
site_data$dtStart <- strptime(site_data$dtStart, "%Y-%m-%d %H:%M:%S")
site_data$dtStart <- as.POSIXct(site_data$dtStart, tz = "UTC") ## convert start times to POSIXct
site_data$dtEnd <- strptime(site_data$dtEnd, "%Y-%m-%d %H:%M:%S")
site_data$dtEnd <- as.POSIXct(site_data$dtEnd, tz = "UTC") ## convert end times to POSIXct
site_data$dtEnd <-as.POSIXct(ifelse(is.na(site_data$dtEnd),
as.POSIXct(format(Sys.time(), "%Y-%m-%d %H:%M:%S")) + lubridate::dyears(1),
site_data$dtEnd), tz = "UTC", origin = "1970-01-01") ## for sites with no end date, make an end date a year from now
site_data <- unique(subset(site_data, select = c(deploymentName, latitude, longitude, dtStart, dtEnd)))
siteOp <- with(site_data, lubridate::interval(dtStart, dtEnd)) ## get running intervals for each deployment
dateRange <- lubridate::interval(as.POSIXct(recvStart), as.POSIXct(recvEnd)) ## get time interval you are interested in
site_data$include <- lubridate::int_overlaps(siteOp, dateRange) ## if include == TRUE then the intervals overlapped and the site was "running" at some point during the specified time
data <- select(data, motusTagID, ts, lat, lon, fullID, site) %>% distinct %>% collect %>% as.data.frame
data$ts <- lubridate::as_datetime(data$ts, tz = "UTC")
data <- data[order(data$ts),] ## order by time
gmap <-  ggmap::get_map(location = c(lon = lonCentre, lat = latCentre), ## lon/lat to centre map over
maptype = maptype, ## select maptype
source = "google",
zoom = zoom) ## zoom, must be a whole number
p <- ggmap::ggmap(gmap)
p + ggplot2::geom_point(data = subset(site_data, include == TRUE), ggplot2::aes(longitude, latitude), pch=21, colour = "black", fill = "yellow") +
ggplot2::geom_path(data=data, ggplot2::aes(lon, lat, group=fullID, col = fullID)) +
ggplot2::labs(x = "Longitude", y = "Latitude") + ggplot2::theme_bw()
}
fun(site_data = recv, data = tmp1, maptype = "terrain",
latCentre = 44, lonCentre = -70, zoom = 5, recvStart = "2014-08-20", recvEnd = "2017-09-15")
fun <- function(data, site_data, zoom, latCentre, lonCentre,
maptype = c("satellite", "terrain", "hybrid", "roadmap"), recvStart, recvEnd){
site_data$dtStart <- strptime(site_data$dtStart, "%Y-%m-%d %H:%M:%S")
site_data$dtStart <- as.POSIXct(site_data$dtStart, tz = "UTC") ## convert start times to POSIXct
site_data$dtEnd <- strptime(site_data$dtEnd, "%Y-%m-%d %H:%M:%S")
site_data$dtEnd <- as.POSIXct(site_data$dtEnd, tz = "UTC") ## convert end times to POSIXct
site_data$dtEnd <-as.POSIXct(ifelse(is.na(site_data$dtEnd),
as.POSIXct(format(Sys.time(), "%Y-%m-%d %H:%M:%S")) + lubridate::dyears(1),
site_data$dtEnd), tz = "UTC", origin = "1970-01-01") ## for sites with no end date, make an end date a year from now
site_data <- unique(subset(site_data, select = c(deploymentName, latitude, longitude, dtStart, dtEnd)))
siteOp <- with(site_data, lubridate::interval(dtStart, dtEnd)) ## get running intervals for each deployment
dateRange <- lubridate::interval(as.POSIXct(recvStart), as.POSIXct(recvEnd)) ## get time interval you are interested in
site_data$include <- lubridate::int_overlaps(siteOp, dateRange) ## if include == TRUE then the intervals overlapped and the site was "running" at some point during the specified time
data <- select(data, motusTagID, ts, lat, lon, fullID, site) %>% distinct %>% collect %>% as.data.frame
data$ts <- lubridate::as_datetime(data$ts, tz = "UTC")
data <- data[order(data$ts),] ## order by time
gmap <-  ggmap::get_map(location = c(lon = lonCentre, lat = latCentre), ## lon/lat to centre map over
maptype = maptype, ## select maptype
source = "google",
zoom = zoom) ## zoom, must be a whole number
p <- ggmap::ggmap(gmap)
p + ggplot2::geom_point(data = subset(site_data, include == TRUE), ggplot2::aes(longitude, latitude), pch=21, colour = "black", fill = "yellow") +
ggplot2::geom_path(data=data, ggplot2::aes(lon, lat, group=fullID, col = fullID)) +
ggplot2::labs(x = "Longitude", y = "Latitude") + ggplot2::theme_bw()
}
fun <- function(data, site_data, zoom, latCentre, lonCentre,
maptype, recvStart, recvEnd){
site_data$dtStart <- strptime(site_data$dtStart, "%Y-%m-%d %H:%M:%S")
site_data$dtStart <- as.POSIXct(site_data$dtStart, tz = "UTC") ## convert start times to POSIXct
site_data$dtEnd <- strptime(site_data$dtEnd, "%Y-%m-%d %H:%M:%S")
site_data$dtEnd <- as.POSIXct(site_data$dtEnd, tz = "UTC") ## convert end times to POSIXct
site_data$dtEnd <-as.POSIXct(ifelse(is.na(site_data$dtEnd),
as.POSIXct(format(Sys.time(), "%Y-%m-%d %H:%M:%S")) + lubridate::dyears(1),
site_data$dtEnd), tz = "UTC", origin = "1970-01-01") ## for sites with no end date, make an end date a year from now
site_data <- unique(subset(site_data, select = c(deploymentName, latitude, longitude, dtStart, dtEnd)))
siteOp <- with(site_data, lubridate::interval(dtStart, dtEnd)) ## get running intervals for each deployment
dateRange <- lubridate::interval(as.POSIXct(recvStart), as.POSIXct(recvEnd)) ## get time interval you are interested in
site_data$include <- lubridate::int_overlaps(siteOp, dateRange) ## if include == TRUE then the intervals overlapped and the site was "running" at some point during the specified time
data <- select(data, motusTagID, ts, lat, lon, fullID, site) %>% distinct %>% collect %>% as.data.frame
data$ts <- lubridate::as_datetime(data$ts, tz = "UTC")
data <- data[order(data$ts),] ## order by time
gmap <-  ggmap::get_map(location = c(lon = lonCentre, lat = latCentre), ## lon/lat to centre map over
maptype = maptype, ## select maptype
source = "google",
zoom = zoom) ## zoom, must be a whole number
p <- ggmap::ggmap(gmap)
p + ggplot2::geom_point(data = subset(site_data, include == TRUE), ggplot2::aes(longitude, latitude), pch=21, colour = "black", fill = "yellow") +
ggplot2::geom_path(data=data, ggplot2::aes(lon, lat, group=fullID, col = fullID)) +
ggplot2::labs(x = "Longitude", y = "Latitude") + ggplot2::theme_bw()
}
fun(site_data = recv, data = tmp1, maptype = "terrain",
latCentre = 44, lonCentre = -70, zoom = 5, recvStart = "2014-08-20", recvEnd = "2017-09-15")
fun(site_data = recv, data = tmp1, maptype = "satellite",
latCentre = 44, lonCentre = -70, zoom = 5, recvStart = "2014-08-20", recvEnd = "2017-09-15")
fun <- function(data, site_data, zoom, latCentre, lonCentre,
maptype = c("satellite", "terrain", "hybrid", "roadmap"), recvStart, recvEnd){
site_data$dtStart <- strptime(site_data$dtStart, "%Y-%m-%d %H:%M:%S")
site_data$dtStart <- as.POSIXct(site_data$dtStart, tz = "UTC") ## convert start times to POSIXct
site_data$dtEnd <- strptime(site_data$dtEnd, "%Y-%m-%d %H:%M:%S")
site_data$dtEnd <- as.POSIXct(site_data$dtEnd, tz = "UTC") ## convert end times to POSIXct
site_data$dtEnd <-as.POSIXct(ifelse(is.na(site_data$dtEnd),
as.POSIXct(format(Sys.time(), "%Y-%m-%d %H:%M:%S")) + lubridate::dyears(1),
site_data$dtEnd), tz = "UTC", origin = "1970-01-01") ## for sites with no end date, make an end date a year from now
site_data <- unique(subset(site_data, select = c(deploymentName, latitude, longitude, dtStart, dtEnd)))
siteOp <- with(site_data, lubridate::interval(dtStart, dtEnd)) ## get running intervals for each deployment
dateRange <- lubridate::interval(as.POSIXct(recvStart), as.POSIXct(recvEnd)) ## get time interval you are interested in
site_data$include <- lubridate::int_overlaps(siteOp, dateRange) ## if include == TRUE then the intervals overlapped and the site was "running" at some point during the specified time
data <- select(data, motusTagID, ts, lat, lon, fullID, site) %>% distinct %>% collect %>% as.data.frame
data$ts <- lubridate::as_datetime(data$ts, tz = "UTC")
data <- data[order(data$ts),] ## order by time
gmap <-  ggmap::get_map(location = c(lon = lonCentre, lat = latCentre), ## lon/lat to centre map over
maptype = maptype, ## select maptype
source = "google",
zoom = zoom) ## zoom, must be a whole number
p <- ggmap::ggmap(gmap)
p + ggplot2::geom_point(data = subset(site_data, include == TRUE), ggplot2::aes(longitude, latitude), pch=21, colour = "black", fill = "yellow") +
ggplot2::geom_path(data=data, ggplot2::aes(lon, lat, group=fullID, col = fullID)) +
ggplot2::labs(x = "Longitude", y = "Latitude") + ggplot2::theme_bw()
}
fun <- function(data, site_data, zoom, latCentre, lonCentre, maptype, recvStart, recvEnd){
if(class(zoom) != "numeric") stop('Numeric value 3-21 required for "zoom"')
if(class(latCentre) != "numeric") stop('Numeric value required for "latCentre"')
if(class(lonCentre) != "numeric") stop('Numeric value required for "lonCentre"')
site_data$dtStart <- strptime(site_data$dtStart, "%Y-%m-%d %H:%M:%S")
site_data$dtStart <- as.POSIXct(site_data$dtStart, tz = "UTC") ## convert start times to POSIXct
site_data$dtEnd <- strptime(site_data$dtEnd, "%Y-%m-%d %H:%M:%S")
site_data$dtEnd <- as.POSIXct(site_data$dtEnd, tz = "UTC") ## convert end times to POSIXct
site_data$dtEnd <-as.POSIXct(ifelse(is.na(site_data$dtEnd),
as.POSIXct(format(Sys.time(), "%Y-%m-%d %H:%M:%S")) + lubridate::dyears(1),
site_data$dtEnd), tz = "UTC", origin = "1970-01-01") ## for sites with no end date, make an end date a year from now
site_data <- unique(subset(site_data, select = c(deploymentName, latitude, longitude, dtStart, dtEnd)))
siteOp <- with(site_data, lubridate::interval(dtStart, dtEnd)) ## get running intervals for each deployment
dateRange <- lubridate::interval(as.POSIXct(recvStart), as.POSIXct(recvEnd)) ## get time interval you are interested in
site_data$include <- lubridate::int_overlaps(siteOp, dateRange) ## if include == TRUE then the intervals overlapped and the site was "running" at some point during the specified time
data <- select(data, motusTagID, ts, lat, lon, fullID, site) %>% distinct %>% collect %>% as.data.frame
data$ts <- lubridate::as_datetime(data$ts, tz = "UTC")
data <- data[order(data$ts),] ## order by time
gmap <-  ggmap::get_map(location = c(lon = lonCentre, lat = latCentre), ## lon/lat to centre map over
maptype = maptype, ## select maptype
source = "google",
zoom = zoom) ## zoom, must be a whole number
p <- ggmap::ggmap(gmap)
p + ggplot2::geom_point(data = subset(site_data, include == TRUE), ggplot2::aes(longitude, latitude), pch=21, colour = "black", fill = "yellow") +
ggplot2::geom_path(data=data, ggplot2::aes(lon, lat, group=fullID, col = fullID)) +
ggplot2::labs(x = "Longitude", y = "Latitude") + ggplot2::theme_bw()
}
fun(site_data = recv, data = tmp1, maptype = "terrain",
latCentre = 44, lonCentre = -70, recvStart = "2014-08-20", recvEnd = "2017-09-15")
fun(site_data = recv, data = tmp1, maptype = "terrain",
latCentre = 44, lonCentre = -70, zoom = n, recvStart = "2014-08-20", recvEnd = "2017-09-15")
rm(recvStart)
recvStart
loc <- filter_(tmp, is.na(paste(lat.name, "!=",0)) | is.na(paste(lon.name, "!=",0)) | is.na(paste(ts.name, "!=",0)))
lat.name = "lat"
lon.name = "lon"
ts.name = "ts"
loc <- filter_(tmp, is.na(paste(lat.name, "!=",0)) | is.na(paste(lon.name, "!=",0)) | is.na(paste(ts.name, "!=",0)))
loc <- filter_(tmp1, is.na(paste(lat.name, "!=",0)) | is.na(paste(lon.name, "!=",0)) | is.na(paste(ts.name, "!=",0)))
loc_na <- filter_(tmp1, !is.na(paste(lat.name, "!=",0)), !is.na(paste(lon.name, "!=",0)), !is.na(paste(ts.name, "!=",0))) ## new dataframe with no NA values in lat, lon, or ts
loc$sunrise <- maptools::sunriset(as.matrix(dplyr::select(loc,lon,lat)),loc$ts, POSIXct.out=T, direction='sunrise')$time ## sunrise column
data <- tmp1 %>% distinct %>% collect %>% as.data.frame ## convert tbl to data.frame for typical "flat" format
data$ts <- as_datetime(data$ts, tz = "UTC") ## convert ts to POSIXct; requires package "lubridate"
require(lubridate)
data$ts <- as_datetime(data$ts, tz = "UTC") ## convert ts to POSIXct; requires package "lubridate"
str(data)
class(data$ts)
loc <- filter_(data, is.na(paste(lat.name, "!=",0)) | is.na(paste(lon.name, "!=",0)) | is.na(paste(ts.name, "!=",0)))
loc_na <- filter_(data, !is.na(paste(lat.name, "!=",0)), !is.na(paste(lon.name, "!=",0)), !is.na(paste(ts.name, "!=",0))) ## new dataframe with no NA values in lat, lon, or ts
loc$sunrise <- maptools::sunriset(as.matrix(dplyr::select(loc,lon,lat)),loc$ts, POSIXct.out=T, direction='sunrise')$time ## sunrise column
View(data)
View(data)
class(data$lat)
View(data)
rm(loc)
rm(loc_na)
rm(loc_na1)
loc_na <- filter_(data, !is.na(paste(lat.name, "!=",0)), !is.na(paste(lon.name, "!=",0)), !is.na(paste(ts.name, "!=",0))) ## new dataframe with no NA values in lat, lon, or ts
View(data)
unique(data$lo)
unique(data$lon)
loc <- filter_(data, is.na(paste(lat.name, "!=",0)) | is.na(paste(lon.name, "!=",0)) | is.na(paste(ts.name, "!=",0)))
loc <- filter_(data, paste(lat.name, "!=",0) | paste(lon.name, "!=",0) | paste(ts.name, "!=",0))
loc <- filter_(data, is.na(paste(lat.name, "!=",0)) | is.na(paste(lon.name, "!=",0)) | is.na(paste(ts.name, "!=",0)))
loc_na <- filter_(data, !is.na(paste(lat.name, "!=",0)), !is.na(paste(lon.name, "!=",0)), !is.na(paste(ts.name, "!=",0))) ## new dataframe with no NA values in lat, lon, or ts
loc <- filter_(data, is.na(paste(lat.name, "!=",0)) || is.na(paste(lon.name, "!=",0)) || is.na(paste(ts.name, "!=",0)))
loc <- filter_(data, paste(lat.name, "!=",0) | paste(lon.name, "!=",0) | paste(ts.name, "!=",0))
str(data)
loc <- filter_(data, is.na(paste(lat.name, "!=",0)) | is.na(paste(lon.name, "!=",0)))
loc <- filter_(data, paste(lat.name, "!=",0) | paste(lon.name, "!=",0))
loc <- filter(data, lat !=0) | lon !=0)
loc <- filter(data, lat !=0 | lon !=0)
lat.name = "lat"
lon.name = "lon"
loc <- filter_(data, paste(lat.name, "!=",0) | paste(lon.name, "!=",0))
loc <- filter(data, lat !=0 | lon !=0)
loc <- filter_(data, paste(lat.name, "!=",0))
loc <- filter_(data, paste(lat.name, "!=",0) || paste(lon.name, "!=",0))
loc <- filter_(data, paste(lat.name, "!=",0) | paste(lon.name, "!=",0))
loc <- filter_(data,paste(lon.name, "!=",0))
loc <- filter_(data, (paste(lat.name, "!=",0)) | (paste(lon.name, "!=",0)))
loc <- data %>% filter_((paste(lat.name, "!=",0)) | (paste(lon.name, "!=",0)))
loc <- filter_(data, is.na(paste(lat.name, "!=",0)))
loc <- filter_(data, is.na(paste(lat.name, "!=",0)))
loc <- filter(data, is.na(paste(lat.name)))
loc <- filter(data, is.na(lat.name))
loc <- filter(data, is.na("lat.name"))
loc <- filter(data, is.na(lat))
loc <- filter_(data, paste(lat.name, "!=",0), na.rm = TRUE)
loc <- filter_(data, paste(lat.name, "!=",0), na.rm == TRUE)
loc <- filter_(data, paste(lat.name, "!=",0))
View(loc)
test <- data
test$lat.name[is.na(test$lat.name)] <- 0
setwd("~/Documents/BSC 2016/motus data")
require(motus)
tagme(38, new = TRUE)
tagme(38, new = TRUE, update = TRUE)
View(data)
warnings()
tellme(8)
tellme(38)
getwd(])
getwd()
jborig <- readRDS("/Users/zoecrysler/Downloads/2015_JamesBay_globaltags_small.rds")
View(jborig)
str(jborig)
range(jborig$ts)
unique(jborig$fullID)
View(data)
setwd("~/Documents/BSC 2016/motus data")
tmp <- tagme(8, update = FALSE)
require(motus)
tmp <- tagme(8, update = FALSE)
tmp1 <- tbl(tmp, "alltags")
lat.name = "lat"
lon.name = "lon"
ts.name = "ts"
data = tmp1
loc <- filter_(data, paste(lat.name, "!=",0))
tmpdat <- tmp1 %>% distinct %>% collect %>% as.data.frame
rm(testDat)
data <- tmpdat
loc <- filter_(data, paste(lat.name, "!=",0))
View(loc)
loc <- filter_(data, paste(lat.name, "!=",0) | paste(lon.name, "!=",0))
loc <- filter_(data, paste(lat.name, "!=",0), paste(lon.name, "!=",0))
test$lat.name[is.na(test$lat.name)] <- 0
loc1 <- filter_(data, paste(lat.name, "=",0), paste(lon.name, "=",0))
loc1 <- filter_(data, paste(lat.name, "==",0), paste(lon.name, "==",0))
View(loc1)
View(tmpdat)
ant = "ant"
loc1 <- filter_(data, paste(lat.name, "==",0), paste(lon.name, "==",0), paste(ant, "==",0))
View(loc1)
ant.name = "ant"
loc1 <- filter_(data, paste(lat.name, "==",0), paste(lon.name, "==",0), paste(ant, "==",0))
loc1 <- filter_(data, paste(lat.name, "==",0), paste(lon.name, "==",0), paste(ant.name, "==",0))
loc1 <- filter(data, lat ==0 | lon == 0 | ant == 0)
View(loc1)
loc1 <- filter(data, paste(lat.name, "==",0), paste(lon.name, "==",0), paste(ant.name, "==",0))
loc1 <- filter(data, paste(lat.name, "==",0) | paste(lon.name, "==",0) | paste(ant.name, "==",0))
loc1 <- subset(data, lat ==0 | lon == 0 | ant == 0)
View(loc1)
View(tmpdat)
loc1 <- subset(data, lat.name ==0 | lon.name == 0 | ant.name == 0)
loc1 <- subset(data, "lat.name" ==0 | "lon.name" == 0 | "ant.name" == 0)
loc1 <- data[data[[lat.name]] == 0 | data[[lon.name]] == 0 | data[[ant.name]] == 0 ]
loc1 <- data[data[[lat.name]] == 0]
lat.name
loc1 <- data[data, data[[lat.name]] == 0]
loc1 <- data[data, data[[lat.name]] == 0,]
loc1 <- filter_(data, interp(~var == 0, var = as.name(lat.name)))
require(lazyeval)
loc1 <- filter_(data, interp(~var == 0, var = as.name(lat.name)))
loc1 <- filter_(data, interp(~var == 0, var = as.name(lat.name)) | interp(~var == 0, var = as.name(ant.name)))
loc1 <- filter_(data, interp(~var == 0, var = as.name(lat.name)), interp(~var == 0, var = as.name(ant.name)))
loc1 <- filter_(data, interp(~var == 0, var = as.name(lat.name)) OR interp(~var == 0, var = as.name(ant.name)))
loc1 <- filter_(data, interp(~var == 0, var = as.name(lat.name)))
lat.na <- filter(data, paste(lat.name, "==",0))
lat.na <- filter(data, paste(lat.name, "=",0))
lat.na <- filter(data, paste(lat.name, "==",0) | paste(lon.name, "==",0) | paste(ant.name, "==",0))
lat.na <- filter(data, paste(lat.name, "==",0),)
lat.na <- filter_(data, paste(lat.name, "==",0))
lon.na <- filter_(data, paste(lon.name, "==",0))
na <- inner_join(lat.na, lon.na) ## join grouped data with data
na <- suppressMessages(inner_join(lat.na, lon.na)) ## join grouped data with data
lon.na <- filter_(data, paste(ant.name, "==",0))
na <- suppressMessages(inner_join(lat.na, lon.na)) ## join grouped data with data
na <- suppressMessages(full_join(lat.na, lon.na)) ## join grouped data with data
lat.full <- filter_(data, paste(lat.name, "!=",0))
lon.full <- filter_(data, paste(ant.name, "!=",0))
full <- suppressMessages(full_join(lat.full, lon.full)) ## join grouped data with data
149927 + 16
View(data)
View(lat.full)
lat.na <- filter_(data, paste(lat.name, "==",0))
lon.na <- filter_(data, paste(ant.name, "==",0))
na <- suppressMessages(full_join(lat.na, lon.na)) ## join grouped data with data
lat.full <- filter_(data, paste(lat.name, "!=",0))
lon.full <- filter_(data, paste(ant.name, "!=",0))
full <- suppressMessages(full_join(lat.full, lon.full)) ## join grouped data with data
View(full)
lat.na <- filter_(data, paste(lat.name, "==",0) | paste(ant.name, "==",0))
lat.na <- filter_(data, paste(lat.name, "==",0) || paste(ant.name, "==",0))
loc1 <- filter_(data, interp(~var == 0, var = as.name(lat.name)))
loc1 <- filter_(data, interp(~var == 0, var = as.name(lat.name)) | interp(~var == 0, var = as.name(ant.name)))
lat.na <- filter_(data, lat.name == 0 |lon.name == 0)
lat.na <- filter_(data, "lat.name" == 0 |"lon.name" == 0)
cols_to_filter = c("lat.name", "ant.name")
zeros <- filter_(data, .dots=paste0(cols_to_filter, "==", 0))
cols_to_filter
zeros <- filter_(data, .dots=paste0(cols_to_filter, "%in%", c(0))
lat.na <- filter_(data, paste(lat.name, "==",0) | paste(ant.name, "==",0))
lon.na <- filter_(data, paste(ant.name, "==",0))
na <- suppressMessages(full_join(lat.na, lon.na)) ## join grouped data with data
lat.full <- filter_(data, paste(lat.name, "!=",0))
lon.full <- filter_(data, paste(ant.name, "!=",0))
full <- suppressMessages(full_join(lat.full, lon.full)) ## join grouped data with data
loc1 <- filter_(data, interp(~var == 0, var = as.name(lat.name)) | interp(~var == 0, var = as.name(lat.name)))
loc2 <- filter_(interp(~var == 0, var = as.name(ant.name)))
loc1 <- subset(data, lat ==0 | lon == 0 | ant == 0)
loc2 <- filter(data, is.na(lat))
#  loc <- data[complete.cases(data[cols]),] ## new dataframe with no NA values in lat, lon, or ts
loc_na <- filter_(data, !is.na(paste(lat.name, "!=",0)), !is.na(paste(lon.name, "!=",0)), !is.na(paste(ts.name, "!=",0))) ## new dataframe with no NA values in lat, lon, or ts
loc$sunrise <- maptools::sunriset(as.matrix(dplyr::select(loc,lon,lat)),loc$ts, POSIXct.out=T, direction='sunrise')$time ## sunrise column
loc$sunset <- maptools::sunriset(as.matrix(dplyr::select(loc,lon,lat)),loc$ts, POSIXct.out=T, direction='sunset')$time ## sunset column
data <- suppressMessages(full_join(loc, loc_na)) ## merge back with rows that contain NA values
return(data)
}
zeros <- filter_(data, .dots=paste0(cols_to_filter, "%in%", c(0)))
zeros <- filter_(data, .dots=paste0(cols_to_filter, "==", 0, as.name(cols_to_filter)))
lat.na <- filter_(data, paste(lat.name, "!=",0))
lon.na <- filter_(data, paste(ant.name, "!=",0))
View(lon.na)
View(lat.na)
na <- suppressMessages(full_join(lat.na, lon.na)) ## join grouped data with data
View(na)
lat.na <- filter_(data, paste(lat.name, "!=",0) & paste(ant.name, "!=",0))
df.names <- c("ID", paste0("x", 1:10))
plotAllTagsLat <- function (data, lat.name = "lat", tagsPerPanel = 5) {
if(class(tagsPerPanel) != "numeric") stop('Numeric value required for "tagsPerPanel"')
data = data %>% mutate(hour = 3600*round(ts/3600, 0)) ## round times to the hour
dataGrouped <- filter_(data, paste(lat.name, "!=", 0)) %>% group_by(site) %>%
summarise_(.dots = setNames(paste0('mean(',lat.name,')'), 'meanlat')) ## get summary of mean lats by site
data <- inner_join(data, dataGrouped, by = "site") ## join grouped data with data
data <- select(data, id, site, hour, lat, meanlat, fullID) %>% distinct %>% collect %>% as.data.frame
data$hour <- lubridate::as_datetime(data$hour, tz = "UTC")
labs = data$fullID[order(data$id, data$fullID)]
dup = duplicated(labs)
tagLabs = labs[!dup]
tagGroupIDs = data$id[order(data$id, data$fullID)][!dup]
tagGroup = 1 + floor((0:length(tagLabs))/tagsPerPanel)
ngroup = length(tagGroup)
names(tagGroup) = tagLabs
tagGroupFactor = tagGroup[as.character(data$fullID)]
tagGroupLabels = tapply(tagGroupIDs, 1 + floor((0:(length(tagGroupIDs) -
1))/tagsPerPanel), function(data) paste("IDs:", paste(sort(unique(data)),
collapse = ",")))
data$tagGroupFactor = factor(tagGroupFactor, labels = tagGroupLabels,
ordered = TRUE)
data <- unique(subset(data, select = c(hour, meanlat,
site, fullID, tagGroupFactor)))
data <- data[order(data$hour), ]
out <- by(data, INDICES = data$tagGroupFactor, FUN = function(m) {
m <- droplevels(m)
m <- ggplot2::ggplot(m, ggplot2::aes(hour, meanlat,
colour = fullID, group = fullID))
m + ggplot2::geom_line() + ggplot2::geom_point(pch = 21) +
ggplot2::theme_bw() + ggplot2::labs(title = "Detection time vs Latitude by Tag",
x = "Date", y = paste0('mean_', lat.name), colour = "ID") + ggplot2::facet_wrap("tagGroupFactor") +
ggplot2::theme(axis.text.x = element_text(angle = 45, hjust = 1))
})
do.call(gridExtra::grid.arrange, out)
}
setwd("~/Documents/BSC 2016/motus data")
require(motus)
tmp <- tagme(8, update = FALSE)
tmp <- tbl(motusSqlFile, "alltags")
tmp <- tbl(tmp, "alltags")
plotAllTagsLat(tmp)
plotRouteMap <- function(data, site_data, zoom, latCentre, lonCentre, maptype, recvStart, recvEnd){
if(class(zoom) != "numeric") stop('Numeric value 3-21 required for "zoom"')
if(class(latCentre) != "numeric") stop('Numeric value required for "latCentre"')
if(class(lonCentre) != "numeric") stop('Numeric value required for "lonCentre"')
site_data$dtStart <- strptime(site_data$dtStart, "%Y-%m-%d %H:%M:%S")
site_data$dtStart <- as.POSIXct(site_data$dtStart, tz = "UTC") ## convert start times to POSIXct
site_data$dtEnd <- strptime(site_data$dtEnd, "%Y-%m-%d %H:%M:%S")
site_data$dtEnd <- as.POSIXct(site_data$dtEnd, tz = "UTC") ## convert end times to POSIXct
site_data$dtEnd <-as.POSIXct(ifelse(is.na(site_data$dtEnd),
as.POSIXct(format(Sys.time(), "%Y-%m-%d %H:%M:%S")) + lubridate::dyears(1),
site_data$dtEnd), tz = "UTC", origin = "1970-01-01") ## for sites with no end date, make an end date a year from now
site_data <- unique(subset(site_data, select = c(deploymentName, latitude, longitude, dtStart, dtEnd)))
siteOp <- with(site_data, lubridate::interval(dtStart, dtEnd)) ## get running intervals for each deployment
dateRange <- lubridate::interval(as.POSIXct(recvStart), as.POSIXct(recvEnd)) ## get time interval you are interested in
site_data$include <- lubridate::int_overlaps(siteOp, dateRange) ## if include == TRUE then the intervals overlapped and the site was "running" at some point during the specified time
data <- select(data, motusTagID, ts, lat, lon, fullID, site) %>% distinct %>% collect %>% as.data.frame
data$ts <- lubridate::as_datetime(data$ts, tz = "UTC")
data <- data[order(data$ts),] ## order by time
gmap <-  ggmap::get_map(location = c(lon = lonCentre, lat = latCentre), ## lon/lat to centre map over
maptype = maptype, ## select maptype
source = "google",
zoom = zoom) ## zoom, must be a whole number
p <- ggmap::ggmap(gmap)
p + ggplot2::geom_point(data = subset(site_data, include == TRUE), ggplot2::aes(longitude, latitude), pch=21, colour = "black", fill = "yellow") +
ggplot2::geom_path(data=data, ggplot2::aes(lon, lat, group=fullID, col = fullID)) +
ggplot2::labs(x = "Longitude", y = "Latitude") + ggplot2::theme_bw()
}
plotRouteMap(site_data = locs, detection_data = dat, maptype = "terrain",latCentre = 44, lonCentre = -70, zoom = 5, startTime = "2016-01-01", endTime = "2016-12-31")
plotRouteMap(site_data = locs, detection_data = dat, maptype = "terrain",latCentre = 44, lonCentre = -70, zoom = 5, recvStart = "2016-01-01", recvEnd = "2016-12-31")
View(recv)
plotRouteMap(site_data = recv, detection_data = tmp, maptype = "terrain",latCentre = 44, lonCentre = -70, zoom = 5, recvStart = "2016-01-01", recvEnd = "2016-12-31")
plotRouteMap <- function(detection_data, site_data, zoom, latCentre, lonCentre, maptype, recvStart, recvEnd){
if(class(zoom) != "numeric") stop('Numeric value 3-21 required for "zoom"')
if(class(latCentre) != "numeric") stop('Numeric value required for "latCentre"')
if(class(lonCentre) != "numeric") stop('Numeric value required for "lonCentre"')
site_data$dtStart <- strptime(site_data$dtStart, "%Y-%m-%d %H:%M:%S")
site_data$dtStart <- as.POSIXct(site_data$dtStart, tz = "UTC") ## convert start times to POSIXct
site_data$dtEnd <- strptime(site_data$dtEnd, "%Y-%m-%d %H:%M:%S")
site_data$dtEnd <- as.POSIXct(site_data$dtEnd, tz = "UTC") ## convert end times to POSIXct
site_data$dtEnd <-as.POSIXct(ifelse(is.na(site_data$dtEnd),
as.POSIXct(format(Sys.time(), "%Y-%m-%d %H:%M:%S")) + lubridate::dyears(1),
site_data$dtEnd), tz = "UTC", origin = "1970-01-01") ## for sites with no end date, make an end date a year from now
site_data <- unique(subset(site_data, select = c(deploymentName, latitude, longitude, dtStart, dtEnd)))
siteOp <- with(site_data, lubridate::interval(dtStart, dtEnd)) ## get running intervals for each deployment
dateRange <- lubridate::interval(as.POSIXct(recvStart), as.POSIXct(recvEnd)) ## get time interval you are interested in
site_data$include <- lubridate::int_overlaps(siteOp, dateRange) ## if include == TRUE then the intervals overlapped and the site was "running" at some point during the specified time
data <- select(data, motusTagID, ts, lat, lon, fullID, site) %>% distinct %>% collect %>% as.data.frame
data$ts <- lubridate::as_datetime(data$ts, tz = "UTC")
data <- data[order(data$ts),] ## order by time
gmap <-  ggmap::get_map(location = c(lon = lonCentre, lat = latCentre), ## lon/lat to centre map over
maptype = maptype, ## select maptype
source = "google",
zoom = zoom) ## zoom, must be a whole number
p <- ggmap::ggmap(gmap)
p + ggplot2::geom_point(data = subset(site_data, include == TRUE), ggplot2::aes(longitude, latitude), pch=21, colour = "black", fill = "yellow") +
ggplot2::geom_path(data=data, ggplot2::aes(lon, lat, group=fullID, col = fullID)) +
ggplot2::labs(x = "Longitude", y = "Latitude") + ggplot2::theme_bw()
}
plotRouteMap(site_data = recv, detection_data = tmp, maptype = "terrain",latCentre = 44, lonCentre = -70, zoom = 5, recvStart = "2016-01-01", recvEnd = "2016-12-31")
plotSite <- function(data, sitename = unique(data$site)){
data = data %>% mutate(hour = 3600*round(ts/3600, 0)) ## round times to the hour
#data <- filter_(data, paste("site", "==", "sitename"))
data <- select(data, hour, antBearing, fullID, site) %>% distinct %>% collect %>% as.data.frame
data$hour <- lubridate::as_datetime(data$hour, tz = "UTC")
p <- ggplot2::ggplot(data, ggplot2::aes(hour, fullID, col = as.factor(antBearing)))
p + ggplot2::geom_point() + ggplot2::theme_bw() +
ggplot2::labs(title = "Detection Time vs Tag ID, coloured by antenna", x = NULL, y = "Tag ID", colour = "Antenna Bearing") +
ggplot2::facet_wrap(~site) + ggplot2::theme(axis.text.x = element_text(angle = 45, hjust = 1))
}
setwd("~/Documents/BSC 2016/motus data")
require(motusClient)
tmp <- tagme(8, update = FALSE)
tmp <- tbl(tmp, "alltags")
plotSite(tmp)
require(ggplot2)
plotSite(tmp)
plotSite(filter(tmp, site == "PINEO"))
require(devtools)
install_github("jbrzusto/motus@staging")
library(motus)
rm(plotAllTagsLat())
rm(plotAllTagsLat())
rm(plotSite)
rm(plotAllTagsLat)
rm(plotRouteMap)
rrequire(motus)
require(motus)
library("motus", lib.loc="~/Library/R/3.3/library")
library(motus)
plotSite(tmp)
